@model Report_PricingRange.Models.ReportTemplateModel

@{
    System.Globalization.NumberFormatInfo nfi = new System.Globalization.CultureInfo("en-US", false).NumberFormat;
    nfi.CurrencyDecimalDigits = 0;
    nfi.PercentDecimalDigits = 1;
    nfi.PercentPositivePattern = 1;
    nfi.CurrencySymbol = "";
    bool bPrintFormat = false;
    bool bExclStatus2 = !(Model.IncludeStatus2InReport);

    var applicationPath = Request.ApplicationPath;

    if (applicationPath == "/")
    {
        applicationPath = "";
    }
    string statusHeader = "New";
    if (Model.ReportType == Report_PricingRange.Models.ReportType.Used)
    {
        statusHeader = "Used";
    }


}

<style type="text/css">
    .indent-2 {
        padding-left: 10px;
    }

    .indent-3 {
        padding-left: 20px;
    }

    .indent-4 {
        padding-left: 30px;
    }

    table.floatThead-table {
        font-size: 12px;
    }

    .indent-td2 {
        display: block;
        margin-left: 10px;
        margin-right: -2px;
    }

    .indent-td3 {
        display: block;
        margin-left: 20px;
        margin-right: -2px;
    }

    .indent-td4 {
        display: block;
        margin-left: 30px;
        margin-right: -2px;
    }

    .breakdown-column {
        width: 250px;
    }
</style>

<div class="col-sm-12" id="location-associate">
    <table class="table table-bordered sticky-header" style="font-size:16px; border-left: none;">

        @{

            decimal InStock1Count = 0;
            decimal InStock2Count = 0;
            decimal InStock3Count = 0;
            decimal InStock5Count = 0;
            decimal InStockCountTotal = 0;
            decimal InStockInvoiceTotal = 0;
            string sInStockInvoiceTotal = "";

            decimal OnOrder1Count = 0;
            decimal OnOrder2Count = 0;
            decimal OnOrder3Count = 0;
            decimal OnOrder5Count = 0;
            decimal OnOrderCountTotal = 0;
            decimal BOTHCountTotal = 0;

            decimal Supply30Day_BreakDownTotal = 0;

            var Breakdown1Index = 0;
            var BreakDown2Index = 0;
            var BreakDown3Index = 0;
            var BreakDown4Index = 0;
            string BreakDownLevel1Location = "";
            string BreakDownLevel1Model = "";
            string BreakDownLevel1Make = "";
            string BreakDownLevel1Matrix = "";
            string BreakDownLevel1Stock = "";
            string BreakDownLevel1VehicleStatus = "";
            string BreakDownLevel1CRExpired = "";
            string BreakDownLevel1BucketDaysInInventory = "";
            string BreakDownLevel1Style = "";
            string BreakDownLevel1Trim = "";
            string BreakdownLevel1ModelYear = "";
            string BreakDownLevel1ModelCode = "";
            bool ShowSupplySold_Breakdown1 = true;
            decimal BreakDown1InStockStatus1 = 0;
            decimal BreakDown1InStockStatus2 = 0;

            decimal BreakDown1InStockStatus3 = 0;
            decimal BreakDown1InStockStatus4 = 0;
            decimal BreakDown1InStockStatus5 = 0;
            decimal BreakDown1InStockStatusTotal = 0;
            decimal BreakDown1InStockInvoiceTotal = 0;
            string sBreakDown1InStockInvoiceTotal = "0";
            string sBreakDown2InStockInvoiceTotal = "0";
            string sBreakDown3InStockInvoiceTotal = "0";
            string sBreakDown4InStockInvoiceTotal = "0";

            decimal BreakDown1OnOrderStatus1 = 0;
            decimal BreakDown1OnOrderStatus2 = 0;

            decimal BreakDown1OnOrderStatus3 = 0;
            decimal BreakDown1OnOrderStatus4 = 0;
            decimal BreakDown1OnOrderStatus5 = 0;
            decimal BreakDown1OnOrderStatusTotal = 0;
            decimal BreakDown1Total = 0;
            decimal BreakDown1Supply = 0;
            decimal Supply30Day_BreakDown1 = 0;
            string Supply30Day_Caption1 = "";
            string BreakDown1Supply_Caption = "";

            string BreakDownLevel2Location = "" + BreakDownLevel1Location;
            string BreakDownLevel2Model = "" + BreakDownLevel1Model;
            string BreakDownLevel2Make = "" + BreakDownLevel1Make;
            string BreakDownLevel2Matrix = "" + BreakDownLevel1Matrix;
            string BreakDownLevel2Stock = "" + BreakDownLevel1Stock;
            string BreakDownLevel2VehicleStatus = "" + BreakDownLevel1VehicleStatus;
            string BreakDownLevel2CRExpired = "" + BreakDownLevel1CRExpired;
            string BreakDownLevel2BucketDaysInInventory = "" + BreakDownLevel1BucketDaysInInventory;
            string BreakDownLevel2Style = "" + BreakDownLevel1Style;
            string BreakDownLevel2Trim = "" + BreakDownLevel1Trim;
            string BreakdownLevel2ModelYear = "" + BreakdownLevel1ModelYear;
            string BreakDownLevel2ModelCode = "" + BreakDownLevel1ModelCode;
            bool ShowSupplySold_Breakdown2 = true;

            var BreakdownLevel2Values = new List<string>();

            var BreakDown1filteredPrices = new List<Report_PricingRange.Models.PricedVehicle>();
            var BreakDown1 = BreakDown1filteredPrices;
            var BreakDown1filteredSupply = new List<Report_PricingRange.Models.PricedVehicle>();

            decimal TotalSold30Count = 0;
            string TotalSupply30Day_CaptionTotal = "0";

            decimal BreakDown2InStockStatus1 = 0;
            decimal BreakDown2InStockStatus2 = 0;

            decimal BreakDown2InStockStatus3 = 0;
            decimal BreakDown2InStockStatus4 = 0;
            decimal BreakDown2InStockStatus5 = 0;
            decimal BreakDown2InStockStatusTotal = 0;

            decimal BreakDown2OnOrderStatus1 = 0;
            decimal BreakDown2OnOrderStatus2 = 0;

            decimal BreakDown2OnOrderStatus3 = 0;
            decimal BreakDown2OnOrderStatus4 = 0;
            decimal BreakDown2OnOrderStatus5 = 0;
            decimal BreakDown2OnOrderStatusTotal = 0;
            decimal BreakDown2InStockInvoiceTotal = 0;
            decimal BreakDown2Total = 0;
            decimal BreakDown2Supply = 0;
            decimal BreakDown2OutOfStock = 0;

            string BreakDownLevel3Location = "" + BreakDownLevel2Location;
            string BreakDownLevel3Model = "" + BreakDownLevel2Model;
            string BreakDownLevel3Make = "" + BreakDownLevel2Make;
            string BreakDownLevel3Matrix = "" + BreakDownLevel2Matrix;
            string BreakDownLevel3Stock = "" + BreakDownLevel2Stock;
            string BreakDownLevel3VehicleStatus = "" + BreakDownLevel2VehicleStatus;

            string BreakDownLevel3CRExpired = "" + BreakDownLevel2CRExpired;
            string BreakDownLevel3BucketDaysInInventory = "" + BreakDownLevel2BucketDaysInInventory;
            string BreakDownLevel3Style = "" + BreakDownLevel2Style;
            string BreakDownLevel3Trim = "" + BreakDownLevel2Trim;
            string BreakdownLevel3ModelYear = "" + BreakdownLevel2ModelYear;
            string BreakDownLevel3ModelCode = "" + BreakDownLevel2ModelCode;
            bool ShowSupplySold_Breakdown3 = true;

            var BreakdownLevel3Values = new List
                                            <string>
                                                ();

            decimal BreakDown3InStockStatus1 = 0;
            decimal BreakDown3InStockStatus2 = 0;

            decimal BreakDown3InStockStatus3 = 0;
            decimal BreakDown3InStockStatus4 = 0;
            decimal BreakDown3InStockStatus5 = 0;
            decimal BreakDown3InStockStatusTotal = 0;
            decimal BreakDown3InStockInvoiceTotal = 0;

            decimal BreakDown3OnOrderStatus1 = 0;
            decimal BreakDown3OnOrderStatus2 = 0;

            decimal BreakDown3OnOrderStatus3 = 0;
            decimal BreakDown3OnOrderStatus4 = 0;
            decimal BreakDown3OnOrderStatus5 = 0;
            decimal BreakDown3OnOrderStatusTotal = 0;
            decimal BreakDown3Total = 0;
            decimal BreakDown3Supply = 0;

            decimal BreakDown4InStockStatus1 = 0;
            decimal BreakDown4InStockStatus2 = 0;

            decimal BreakDown4InStockStatus3 = 0;
            decimal BreakDown4InStockStatus4 = 0;
            decimal BreakDown4InStockStatus5 = 0;
            decimal BreakDown4InStockStatusTotal = 0;
            decimal BreakDown4InStockInvoiceTotal = 0;

            decimal BreakDown4OnOrderStatus1 = 0;
            decimal BreakDown4OnOrderStatus2 = 0;

            decimal BreakDown4OnOrderStatus3 = 0;
            decimal BreakDown4OnOrderStatus4 = 0;
            decimal BreakDown4OnOrderStatus5 = 0;
            decimal BreakDown4OnOrderStatusTotal = 0;
            decimal BreakDown4Total = 0;
            decimal BreakDown4Supply = 0;
            var label1 = "";
            var label2 = "";
            string BreakDownLevel4VehicleStatus = "";

            var BreakDown2filteredPrices = new List<Report_PricingRange.Models.PricedVehicle>();
            var BreakDown2data = BreakDown2filteredPrices;
            var BreakDown2filteredSupply = new List<Report_PricingRange.Models.PricedVehicle>();

            var label3 = "";
            var previous_label3 = "";
            var BreakDown3filteredPrices = new List<Report_PricingRange.Models.PricedVehicle>
                ();
            var BreakDown3data = BreakDown3filteredPrices;

            var BreakDown3filteredSupply = new List<Report_PricingRange.Models.PricedVehicle>();
            var label4 = "";

            var BreakDown4filteredPrices = new List<Report_PricingRange.Models.PricedVehicle>
                ();

            var BreakDownLevel4Values = new List<string>
                        ();

            decimal Supply30Day_BreakDown3 = 0;
            string Supply30Day_Caption3 = "";

            string BreakDown3Supply_Caption = "";


            string BreakDownLevel4Location = "";
            string BreakDownLevel4Model = "";
            string BreakDownLevel4Make = "";
            string BreakDownLevel4Matrix = "";
            string BreakDownLevel4Stock = "";
            string BreakDownLevel4CRExpired = "";
            string BreakDownLevel4BucketDaysInInventory = "";
            string BreakDownLevel4Style = "";
            string BreakDownLevel4Trim = "";
            string BreakDownLevel4ModelYear = "";
            string BreakDownLevel4ModelCode = "";
            bool ShowSupplySold_Breakdown4 = true;

            var BreakDown4filteredSupply = new List<Report_PricingRange.Models.PricedVehicle>();
            var BreakDown4data = BreakDown4filteredPrices;
            string BreakDown2Supply_Caption = "";
            decimal Supply30Day_BreakDown2 = 0;
            string Supply30Day_Caption2 = "";
            decimal Supply30Day_BreakDown4 = 0;
            string Supply30Day_Caption4 = "";
            string BreakDown4Supply_Caption = "";


        }



        <tbody>
        <thead>
            <tr style="background-color:#d9edf7;">
                <th class="text-center divider-column" colspan="3"></th>
                @{ if (Model.IncludeStatus2InReport == true)
                    {
                        <th class="text-center divider-column" colspan="6">In Stock (Status 1,2)</th>
                    }
                    else
                    {
                        <th class="text-center divider-column" colspan="6">In Stock (Status 1 ONLY)</th>
                    }
                }
                <th class="text-center divider-column" colspan="5">On Order</th>
                <th class="text-center divider-column" colspan="1">Total</th>
            </tr>
            <tr style="background-color:#f5f5f5;">
                <th class="text-centerr divider-column"> </th>
                <th class="text-center">Sold 30</th>
                <th class="divider-column text-center">Supply</th>
                <th class="text-center">MSRP+</th>

                <th class="text-center">MSRP</th>

                <th class="text-center">&lt; MSRP&gt;Inv</th>

                <th class="text-center">Less Than Invoice</th>
                <th class="text-center divider-column">TOTAL</th>
                <th class="text-center divider-column">Invoice</th>

                <th class="text-center">MSRP+</th>

                <th class="text-center">MSRP</th>

                <th class="text-center">&lt; MSRP&gt;Inv</th>

                <th class="text-center">Less Than Invoice</th>
                <th class="text-center divider-column">TOTAL</th>
                <th class="text-center divider-column"></th>
            </tr>
        </thead>
        @if (Model.Prices != null)
        {
            var breakdownLevel1Values = new List<string>();
            BreakDown1filteredSupply = Model.Supply;
            TotalSold30Count = BreakDown1filteredSupply.Sum(x => x.Cars);

            switch (Model.BreakDownLevel1)
            {
                case "ModelName":
                    breakdownLevel1Values = Model.Prices.Select(x => x.ModelName).Distinct().OrderBy(x => x).ToList();
                    break;
                case "ModelCode":
                    breakdownLevel1Values = Model.Prices.Select(x => x.ModelCode).Distinct().OrderBy(x => x).ToList();
                    break;
                case "ModelYear":
                    breakdownLevel1Values = Model.Prices.Select(x => x.ModelYearString).Distinct().OrderBy(x => x).ToList();
                    break;

                case "VehicleStatus":
                    breakdownLevel1Values = Model.Prices.Select(x => x.VehicleStatus).Distinct().OrderBy(x => x.AsInt()).ToList();
                    break;

                case "StockNumber":
                    breakdownLevel1Values = Model.Prices.Select(x => x.StockNumber).Distinct().OrderBy(x => x).ToList();
                    break;

                case "MakeName":
                    breakdownLevel1Values = Model.Prices.Select(x => x.MakeName).Distinct().OrderBy(x => x).ToList();
                    break;

                case "MatrixPricing":
                    breakdownLevel1Values = Model.Prices.Select(x => x.MatrixPricing).Distinct().OrderBy(x => x).ToList();
                    break;

                case "LocationCode":
                    breakdownLevel1Values = Model.Prices.Select(x => x.LocationCode).Distinct().OrderBy(x => x).ToList();
                    break;

                case "CRExpired":
                    breakdownLevel1Values = Model.Prices.Select(x => x.CRExpired).Distinct().OrderBy(x => x).ToList();

                    break;

                case "BucketDaysInInventory":
                    breakdownLevel1Values = Model.Prices.Select(x => x.BucketDaysInInventory).Distinct().OrderBy(x => x).ToList();

                    break;

                case "StyleName":
                    breakdownLevel1Values = Model.Prices.Select(x => x.StyleName).Distinct().OrderBy(x => x).ToList();

                    break;

                case "Trim":
                    breakdownLevel1Values = Model.Prices.Select(x => x.Trim).Distinct().OrderBy(x => x).ToList();

                    break;


                default:
                    // breakdownLevel1Values = Model.Prices.Select(x => x.DealerId.ToString()).Distinct().OrderBy(x => x).ToList();
                    break;
            }


            foreach (var breakdown1 in breakdownLevel1Values)
            {
                label1 = "" + breakdown1;



                switch (Model.BreakDownLevel1)
                {
                    case "ModelName":
                        BreakDown1filteredPrices = Model.Prices.FindAll(x => x.ModelName == label1);
                        BreakDown1filteredSupply = Model.Supply.FindAll(x => x.ModelName == label1);
                        BreakDownLevel1Model = breakdown1;
                        break;
                    case "ModelCode":
                        BreakDown1filteredPrices = Model.Prices.FindAll(x => x.ModelCode == label1);
                        BreakDown1filteredSupply = Model.Supply.FindAll(x => x.ModelCode == label1);
                        BreakDownLevel1ModelCode = breakdown1;
                        break;

                    case "ModelYear":
                        BreakDown1filteredPrices = Model.Prices.FindAll(x => x.ModelYearString == label1);
                        BreakDown1filteredSupply = Model.Supply.FindAll(x => x.ModelYearString == label1);
                        BreakdownLevel1ModelYear = breakdown1;
                        break;

                    case "StockNumber":
                        BreakDown1filteredPrices = Model.Prices.FindAll(x => x.StockNumber == label1);
                        BreakDown1filteredSupply = Model.Supply.FindAll(x => x.StockNumber == label1);
                        BreakDownLevel1Stock = breakdown1;
                        break;

                    case "VehicleStatus":
                        BreakDown1filteredPrices = Model.Prices.FindAll(x => x.VehicleStatus == label1);
                        BreakDown1filteredSupply = Model.Supply.FindAll(x => x.VehicleStatus == label1);

                        BreakDownLevel1VehicleStatus = breakdown1;
                        break;

                    case "MakeName":
                        BreakDown1filteredPrices = Model.Prices.FindAll(x => x.MakeName == label1);
                        BreakDown1filteredSupply = Model.Supply.FindAll(x => x.MakeName == label1);
                        BreakDownLevel1Make = breakdown1;

                        break;

                    case "MatrixPricing":
                        BreakDown1filteredPrices = Model.Prices.FindAll(x => x.MatrixPricing == label1);
                        BreakDown1filteredSupply = Model.Supply;
                        BreakDownLevel1Matrix = label1;
                        ShowSupplySold_Breakdown1 = false;  // don't show sold/supply for this breakdown (will not make sense)
                        break;

                    case "LocationCode":
                        BreakDown1filteredPrices = Model.Prices.FindAll(x => x.LocationCode == label1);
                        BreakDown1filteredSupply = Model.Supply.FindAll(x => x.LocationCode == label1);
                        BreakDownLevel1Location = breakdown1;

                        break;

                    case "CRExpired":
                        BreakDown1filteredPrices = Model.Prices.FindAll(x => x.CRExpired == label1);
                        BreakDown1filteredSupply = Model.Supply;
                        BreakDownLevel1CRExpired = breakdown1;
                        ShowSupplySold_Breakdown1 = false;  // don't show sold/supply for this breakdown (will not make sense)

                        break;

                    case "BucketDaysInInventory":
                        BreakDown1filteredPrices = Model.Prices.FindAll(x => x.BucketDaysInInventory == label1);
                        BreakDown1filteredSupply = Model.Supply;
                        BreakDownLevel1BucketDaysInInventory = breakdown1;
                        ShowSupplySold_Breakdown1 = false;  // don't show sold/supply for this breakdown (will not make sense)

                        break;

                    case "StyleName":
                        BreakDown1filteredPrices = Model.Prices.FindAll(x => x.StyleName == label1);
                        BreakDown1filteredSupply = Model.Supply.FindAll(x => x.StyleName == label1);
                        BreakDownLevel1Style = breakdown1;
                        ShowSupplySold_Breakdown1 = false;  // don't show sold/supply for this breakdown (will not make sense)

                        break;

                    case "Trim":
                        BreakDown1filteredPrices = Model.Prices.FindAll(x => x.Trim == label1);
                        BreakDown1filteredSupply = Model.Supply.FindAll(x => x.Trim == label1);
                        BreakDownLevel1Trim = breakdown1;

                        break;

                    default:
                        BreakDown1filteredPrices = Model.Prices.FindAll(x => x.LocationCode == breakdown1);
                        BreakDown1filteredSupply = Model.Supply.FindAll(x => x.LocationCode == breakdown1);
                        break;
                }


                BreakDown1InStockStatus1 = 0;
                BreakDown1InStockStatus2 = 0;

                BreakDown1InStockStatus3 = 0;
                BreakDown1InStockStatus4 = 0;
                BreakDown1InStockStatus5 = 0;
                BreakDown1InStockStatusTotal = 0;

                BreakDown1OnOrderStatus1 = 0;
                BreakDown1OnOrderStatus2 = 0;

                BreakDown1OnOrderStatus3 = 0;
                BreakDown1OnOrderStatus4 = 0;
                BreakDown1OnOrderStatus5 = 0;
                BreakDown1OnOrderStatusTotal = 0;
                BreakDown1Total = 0;
                BreakDown1Supply = 0;
                BreakDown1InStockInvoiceTotal = 0;
                // supply

                BreakDown1Supply = BreakDown1filteredSupply.Sum(x => x.Cars);

                BreakDown1 = BreakDown1filteredPrices.FindAll(x => x.PricingStatus == "InStock1");
                BreakDown1InStockStatus1 = BreakDown1.Sum(x => x.Id);
                InStock1Count += BreakDown1InStockStatus1;
                BreakDown1 = BreakDown1filteredPrices.FindAll(x => x.PricingStatus == "InStock2");
                BreakDown1InStockStatus2 = BreakDown1.Sum(x => x.Id);
                InStock2Count += BreakDown1InStockStatus2;

                BreakDown1 = BreakDown1filteredPrices.FindAll(x => x.PricingStatus == "InStock3");
                BreakDown1InStockStatus3 = BreakDown1.Sum(x => x.Id);
                InStock3Count += BreakDown1InStockStatus3;

                BreakDown1 = BreakDown1filteredPrices.FindAll(x => x.PricingStatus == "InStock5");
                BreakDown1InStockStatus5 = BreakDown1.Sum(x => x.Id);
                InStock5Count += BreakDown1InStockStatus5;
                BreakDown1InStockStatusTotal = BreakDown1InStockStatus1 + BreakDown1InStockStatus2 + BreakDown1InStockStatus3 + BreakDown1InStockStatus4 + BreakDown1InStockStatus5;
                InStockCountTotal += BreakDown1InStockStatusTotal;
                BreakDown1InStockInvoiceTotal = BreakDown1filteredPrices.Sum(x => x.InvoiceTotal);
                InStockInvoiceTotal += BreakDown1InStockInvoiceTotal;
                sBreakDown1InStockInvoiceTotal = BreakDown1InStockInvoiceTotal.ToString("c0");

                BreakDown1 = BreakDown1filteredPrices.FindAll(x => x.PricingStatus == "OnOrder1");
                BreakDown1OnOrderStatus1 = BreakDown1.Sum(x => x.Id);
                OnOrder1Count += BreakDown1OnOrderStatus1;

                BreakDown1 = BreakDown1filteredPrices.FindAll(x => x.PricingStatus == "OnOrder2");
                BreakDown1OnOrderStatus2 = BreakDown1.Sum(x => x.Id);
                OnOrder2Count += BreakDown1OnOrderStatus2;

                BreakDown1 = BreakDown1filteredPrices.FindAll(x => x.PricingStatus == "OnOrder3");
                BreakDown1OnOrderStatus3 = BreakDown1.Sum(x => x.Id);
                OnOrder3Count += BreakDown1OnOrderStatus3;

                BreakDown1 = BreakDown1filteredPrices.FindAll(x => x.PricingStatus == "OnOrder5");
                BreakDown1OnOrderStatus5 = BreakDown1.Sum(x => x.Id);
                OnOrder5Count += BreakDown1OnOrderStatus5;

                BreakDown1OnOrderStatusTotal = BreakDown1OnOrderStatus1 + BreakDown1OnOrderStatus2 + BreakDown1OnOrderStatus3 + BreakDown1OnOrderStatus4 + BreakDown1OnOrderStatus5;
                BreakDown1Total = BreakDown1OnOrderStatusTotal + BreakDown1InStockStatusTotal;
                OnOrderCountTotal += BreakDown1OnOrderStatusTotal;
                BOTHCountTotal = OnOrderCountTotal + InStockCountTotal;

                Supply30Day_BreakDown1 = 0;
                Supply30Day_Caption1 = "";
                BreakDown1Supply_Caption = "";

                Supply30Day_Caption1 = "Err";
                BreakDown1Supply_Caption = BreakDown1Supply.ToString("N0");
                if (BreakDown1Supply > 0)
                {
                    Supply30Day_BreakDown1 = ((30 / BreakDown1Supply) * BreakDown1InStockStatusTotal);
                    Supply30Day_Caption1 = Supply30Day_BreakDown1.ToString("N1");
                }

                if (ShowSupplySold_Breakdown1 == false)
                {
                    Supply30Day_Caption1 = "";
                    BreakDown1Supply_Caption = "";

                }


                <tr class="location-bd1-data-row-@Breakdown1Index @label1.Replace(" ", "-").Replace(".","-").Replace("/","-").Replace("'","-").Replace("*","-").Replace("(","-").Replace(")","-")" data-collapse="location-bd1-collapse-@Breakdown1Index">

                    <td class="divider-column breakdown-column"><a data-toggle="collapse" id="location-bd1-collapse-@Breakdown1Index" style="cursor: pointer;" class="location-bd1-collapse-@Breakdown1Index-href collapsed" data-target=".location-bd1-collapse-@Breakdown1Index">@label1 </a></td>
                    <td class="text-center">@BreakDown1Supply_Caption</td>
                    <td class="divider-column text-center">
                        @Supply30Day_Caption1
                    </td>

                    <td class="text-center">
                        @{ if ((BreakDown1InStockStatus1 == 0) | (bPrintFormat != false))
                            {
                                @BreakDown1InStockStatus1
                            }
                            else
                            {

                                @Html.ActionLink("" + BreakDown1InStockStatus1, "ViewVehicles", new
                           {
                               pstat = "InStock1",
                               locd = BreakDownLevel1Location,
                               stckn = BreakDownLevel1Stock,
                               Make = BreakDownLevel1Make,
                               mdlv = BreakDownLevel1Model,
                               mxyn = BreakDownLevel1Matrix,
                               crx = BreakDownLevel1CRExpired,
                               styln = BreakDownLevel1Style,
                               trmnm = BreakDownLevel1Trim,
                               bDay = BreakDownLevel1BucketDaysInInventory,
                               yr = BreakdownLevel1ModelYear
                               ,
                               x2 = bExclStatus2
                               ,
                               vs = BreakDownLevel1VehicleStatus
                                    , usedOrNew = Model.ReportType
                           }, new { target = "_blank" })

                            }
                        }

                    </td>
                    <td class="text-center">
                        @{ if ((BreakDown1InStockStatus2 == 0) | (bPrintFormat != false))
                            {
                                @BreakDown1InStockStatus2
                            }
                            else
                            {

                                @Html.ActionLink("" + BreakDown1InStockStatus2, "ViewVehicles", new
                           {
                               pstat = "InStock2",
                               locd = BreakDownLevel1Location,
                               stckn = BreakDownLevel1Stock,
                               Make = BreakDownLevel1Make,
                               mdlv = BreakDownLevel1Model,
                               mxyn = BreakDownLevel1Matrix,
                               crx = BreakDownLevel1CRExpired,
                               styln = BreakDownLevel1Style,
                               trmnm = BreakDownLevel1Trim,
                               bDay = BreakDownLevel1BucketDaysInInventory,
                               yr = BreakdownLevel1ModelYear,
                               mc = BreakDownLevel1ModelCode
                               ,
                               x2 = bExclStatus2
                               ,
                               vs = BreakDownLevel1VehicleStatus
                                                                        ,
                               usedOrNew = Model.ReportType

                           }, new { target = "_blank" })
                            }
                        }

                    </td>

                    <td class="text-center">
                        @{ if ((BreakDown1InStockStatus3 == 0) | (bPrintFormat != false))
                            {
                                @BreakDown1InStockStatus3
                            }
                            else
                            {

                                @Html.ActionLink("" + BreakDown1InStockStatus3, "ViewVehicles", new
                           {
                               pstat = "InStock3",
                               locd = BreakDownLevel1Location,
                               stckn = BreakDownLevel1Stock,
                               Make = BreakDownLevel1Make,
                               mdlv = BreakDownLevel1Model,
                               mxyn = BreakDownLevel1Matrix,
                               crx = BreakDownLevel1CRExpired,
                               styln = BreakDownLevel1Style,
                               trmnm = BreakDownLevel1Trim,
                               bDay = BreakDownLevel1BucketDaysInInventory,
                               yr = BreakdownLevel1ModelYear,
                               mc = BreakDownLevel1ModelCode
                               ,
                               x2 = bExclStatus2
                               ,
                               vs = BreakDownLevel1VehicleStatus
                                                                        ,
                               usedOrNew = Model.ReportType

                           }, new { target = "_blank" })
                            }
                        }

                    </td>
                    <td class="text-center">
                        @{ if ((BreakDown1InStockStatus5 == 0) | (bPrintFormat != false))
                            {
                                @BreakDown1InStockStatus5
                            }
                            else
                            {

                                @Html.ActionLink("" + BreakDown1InStockStatus5, "ViewVehicles", new
                           {
                               pstat = "InStock5",
                               locd = BreakDownLevel1Location,
                               stckn = BreakDownLevel1Stock,
                               Make = BreakDownLevel1Make,
                               mdlv = BreakDownLevel1Model,
                               mxyn = BreakDownLevel1Matrix,
                               crx = BreakDownLevel1CRExpired,
                               styln = BreakDownLevel1Style,
                               trmnm = BreakDownLevel1Trim,
                               bDay = BreakDownLevel1BucketDaysInInventory,
                               yr = BreakdownLevel1ModelYear,
                               mc = BreakDownLevel1ModelCode
                               ,
                               x2 = bExclStatus2
                               ,
                               vs = BreakDownLevel1VehicleStatus
                                                                        ,
                               usedOrNew = Model.ReportType

                           }, new { target = "_blank" })
                            }
                        }

                    </td>
                    <td class="divider-column text-center">
                        @{ if ((BreakDown1InStockStatusTotal == 0) | (bPrintFormat != false))
                            {
                                @BreakDown1InStockStatusTotal
                            }
                            else
                            {

                                @Html.ActionLink("" + BreakDown1InStockStatusTotal, "ViewVehicles", new
                           {
                               pstat = "InStock",
                               locd = BreakDownLevel1Location,
                               stckn = BreakDownLevel1Stock,
                               Make = BreakDownLevel1Make,
                               mdlv = BreakDownLevel1Model,
                               mxyn = BreakDownLevel1Matrix,
                               crx = BreakDownLevel1CRExpired,
                               styln = BreakDownLevel1Style,
                               trmnm = BreakDownLevel1Trim,
                               bDay = BreakDownLevel1BucketDaysInInventory,
                               yr = BreakdownLevel1ModelYear,
                               mc = BreakDownLevel1ModelCode
                                     ,
                               x2 = bExclStatus2
                               ,
                               vs = BreakDownLevel1VehicleStatus
                                                                        ,
                               usedOrNew = Model.ReportType

                           }, new { target = "_blank" })
                            }
                        }

                    </td>

                    <td class="divider-column text-center">
                        @{ if ((BreakDown1InStockInvoiceTotal == 0) | (bPrintFormat != false))
                            {
                                @sBreakDown1InStockInvoiceTotal
                            }
                            else
                            {

                                @Html.ActionLink("" + sBreakDown1InStockInvoiceTotal, "ViewVehicles", new
                           {
                               pstat = "InStock",
                               locd = BreakDownLevel1Location,
                               stckn = BreakDownLevel1Stock,
                               Make = BreakDownLevel1Make,
                               mdlv = BreakDownLevel1Model,
                               mxyn = BreakDownLevel1Matrix,
                               crx = BreakDownLevel1CRExpired,
                               styln = BreakDownLevel1Style,
                               trmnm = BreakDownLevel1Trim,
                               bDay = BreakDownLevel1BucketDaysInInventory,
                               yr = BreakdownLevel1ModelYear,
                               mc = BreakDownLevel1ModelCode
                                     ,
                               x2 = bExclStatus2
                               ,
                               vs = BreakDownLevel1VehicleStatus
                                                                        ,
                               usedOrNew = Model.ReportType

                           }, new { target = "_blank" })
                            }
                        }

                    </td>

                    <td class="text-center">
                        @{ if ((BreakDown1OnOrderStatus1 == 0) | (bPrintFormat != false))
                            {
                                @BreakDown1OnOrderStatus1
                            }
                            else
                            {

                                @Html.ActionLink("" + BreakDown1OnOrderStatus1, "ViewVehicles", new
                           {
                               pstat = "OnOrder1",
                               locd = BreakDownLevel1Location,
                               stckn = BreakDownLevel1Stock,
                               Make = BreakDownLevel1Make,
                               mdlv = BreakDownLevel1Model,
                               mxyn = BreakDownLevel1Matrix,
                               crx = BreakDownLevel1CRExpired,
                               styln = BreakDownLevel1Style,
                               trmnm = BreakDownLevel1Trim,
                               bDay = BreakDownLevel1BucketDaysInInventory,
                               yr = BreakdownLevel1ModelYear,
                               mc = BreakDownLevel1ModelCode
                               ,
                               x2 = bExclStatus2
                               ,
                               vs = BreakDownLevel1VehicleStatus
                                                                        ,
                               usedOrNew = Model.ReportType

                           }, new { target = "_blank" })
                            }
                        }

                    </td>
                    <td class="text-center">
                        @{ if ((BreakDown1OnOrderStatus2 == 0) | (bPrintFormat != false))
                            {
                                @BreakDown1OnOrderStatus2
                            }
                            else
                            {

                                @Html.ActionLink("" + BreakDown1OnOrderStatus2, "ViewVehicles", new
                           {
                               pstat = "OnOrder2",
                               locd = BreakDownLevel1Location,
                               stckn = BreakDownLevel1Stock,
                               Make = BreakDownLevel1Make,
                               mdlv = BreakDownLevel1Model,
                               mxyn = BreakDownLevel1Matrix,
                               crx = BreakDownLevel1CRExpired,
                               styln = BreakDownLevel1Style,
                               trmnm = BreakDownLevel1Trim,
                               bDay = BreakDownLevel1BucketDaysInInventory,
                               yr = BreakdownLevel1ModelYear,
                               mc = BreakDownLevel1ModelCode
                               ,
                               x2 = bExclStatus2
                               ,
                               vs = BreakDownLevel1VehicleStatus
                                                                        ,
                               usedOrNew = Model.ReportType

                           }, new { target = "_blank" })
                            }
                        }

                    </td>

                    <td class="text-center">
                        @{ if ((BreakDown1OnOrderStatus3 == 0) | (bPrintFormat != false))
                            {
                                @BreakDown1OnOrderStatus3
                            }
                            else
                            {

                                @Html.ActionLink("" + BreakDown1OnOrderStatus3, "ViewVehicles", new
                           {
                               pstat = "OnOrder3",
                               locd = BreakDownLevel1Location,
                               stckn = BreakDownLevel1Stock,
                               Make = BreakDownLevel1Make,
                               mdlv = BreakDownLevel1Model,
                               mxyn = BreakDownLevel1Matrix,
                               crx = BreakDownLevel1CRExpired,
                               styln = BreakDownLevel1Style,
                               trmnm = BreakDownLevel1Trim,
                               bDay = BreakDownLevel1BucketDaysInInventory,
                               yr = BreakdownLevel1ModelYear,
                               mc = BreakDownLevel1ModelCode
                               ,
                               x2 = bExclStatus2
                               ,
                               vs = BreakDownLevel1VehicleStatus
                                                                        ,
                               usedOrNew = Model.ReportType

                           }, new { target = "_blank" })
                            }
                        }

                    </td>
                    <td class="text-center">
                        @{ if ((BreakDown1OnOrderStatus5 == 0) | (bPrintFormat != false))
                            {
                                @BreakDown1OnOrderStatus5
                            }
                            else
                            {

                                @Html.ActionLink("" + BreakDown1OnOrderStatus5, "ViewVehicles", new
                           {
                               pstat = "OnOrder5",
                               locd = BreakDownLevel1Location,
                               stckn = BreakDownLevel1Stock,
                               Make = BreakDownLevel1Make,
                               mdlv = BreakDownLevel1Model,
                               mxyn = BreakDownLevel1Matrix,
                               crx = BreakDownLevel1CRExpired,
                               styln = BreakDownLevel1Style,
                               trmnm = BreakDownLevel1Trim,
                               bDay = BreakDownLevel1BucketDaysInInventory,
                               yr = BreakdownLevel1ModelYear,
                               mc = BreakDownLevel1ModelCode
                               ,
                               x2 = bExclStatus2
                               ,
                               vs = BreakDownLevel1VehicleStatus
                                                                        ,
                               usedOrNew = Model.ReportType

                           }, new { target = "_blank" })
                            }
                        }

                    </td>
                    <td class="divider-column text-center">
                        @{ if ((BreakDown1OnOrderStatusTotal == 0) | (bPrintFormat != false))
                            {
                                @BreakDown1OnOrderStatusTotal
                            }
                            else
                            {

                                @Html.ActionLink("" + BreakDown1OnOrderStatusTotal, "ViewVehicles", new
                           {
                               pstat = "OnOrder",
                               locd = BreakDownLevel1Location,
                               stckn = BreakDownLevel1Stock,
                               Make = BreakDownLevel1Make,
                               mdlv = BreakDownLevel1Model,
                               mxyn = BreakDownLevel1Matrix,
                               crx = BreakDownLevel1CRExpired,
                               styln = BreakDownLevel1Style,
                               trmnm = BreakDownLevel1Trim,
                               bDay = BreakDownLevel1BucketDaysInInventory,
                               yr = BreakdownLevel1ModelYear,
                               mc = BreakDownLevel1ModelCode
                               ,
                               x2 = bExclStatus2
                               ,
                               vs = BreakDownLevel1VehicleStatus
                                                                        ,
                               usedOrNew = Model.ReportType

                           }, new { target = "_blank" })
                            }
                        }

                    </td>
                    <td class="divider-column text-center">
                        @{ if ((BreakDown1Total == 0) | (bPrintFormat != false))
                            {
                                @BreakDown1Total
                            }
                            else
                            {

                                @Html.ActionLink("" + BreakDown1Total, "ViewVehicles", new
                           {
                               pstat = "",
                               locd = BreakDownLevel1Location,
                               stckn = BreakDownLevel1Stock,
                               Make = BreakDownLevel1Make,
                               mdlv = BreakDownLevel1Model,
                               mxyn = BreakDownLevel1Matrix,
                               crx = BreakDownLevel1CRExpired,
                               styln = BreakDownLevel1Style,
                               trmnm = BreakDownLevel1Trim,
                               bDay = BreakDownLevel1BucketDaysInInventory,
                               yr = BreakdownLevel1ModelYear,
                               mc = BreakDownLevel1ModelCode
                               ,
                               x2 = bExclStatus2
                               ,
                               vs = BreakDownLevel1VehicleStatus
                                                                        ,
                               usedOrNew = Model.ReportType

                           }, new { target = "_blank" })
                            }
                        }

                    </td>


                </tr>



                            BreakDownLevel2Location = "" + BreakDownLevel1Location;
                            BreakDownLevel2Model = "" + BreakDownLevel1Model;
                            BreakDownLevel2Make = "" + BreakDownLevel1Make;
                            BreakDownLevel2Matrix = "" + BreakDownLevel1Matrix;
                            BreakDownLevel2Stock = "" + BreakDownLevel1Stock;
                            BreakDownLevel2CRExpired = "" + BreakDownLevel1CRExpired;
                            BreakDownLevel2BucketDaysInInventory = "" + BreakDownLevel1BucketDaysInInventory;
                            BreakDownLevel2Style = "" + BreakDownLevel1Style;
                            BreakDownLevel2Trim = "" + BreakDownLevel1Trim;
                            BreakdownLevel2ModelYear = "" + BreakdownLevel1ModelYear;
                            BreakDownLevel2ModelCode = "" + BreakDownLevel1ModelCode;
                            ShowSupplySold_Breakdown2 = true;


                            switch (Model.BreakDownLevel2)
                            {
                                case "ModelName":
                                    BreakdownLevel2Values = Model.Prices.Select(x => x.ModelName).Distinct().OrderBy(x => x).ToList();
                                    break;
                                case "ModelCode":
                                    BreakdownLevel2Values = Model.Prices.Select(x => x.ModelCode).Distinct().OrderBy(x => x).ToList();
                                    break;

                                case "ModelYear":
                                    BreakdownLevel2Values = Model.Prices.Select(x => x.ModelYearString).Distinct().OrderBy(x => x).ToList();
                                    break;

                                case "StockNumber":
                                    BreakdownLevel2Values = Model.Prices.Select(x => x.StockNumber).Distinct().OrderBy(x => x).ToList();
                                    break;

                                case "VehicleStatus":
                                    BreakdownLevel2Values = Model.Prices.Select(x => x.VehicleStatus).Distinct().OrderBy(x => x.AsInt()).ToList();
                                    break;

                                case "MakeName":
                                    BreakdownLevel2Values = Model.Prices.Select(x => x.MakeName).Distinct().OrderBy(x => x).ToList();
                                    break;

                                case "MatrixPricing":
                                    BreakdownLevel2Values = Model.Prices.Select(x => x.MatrixPricing).Distinct().OrderBy(x => x).ToList();
                                    break;

                                case "LocationCode":
                                    BreakdownLevel2Values = Model.Prices.Select(x => x.LocationCode).Distinct().OrderBy(x => x).ToList();
                                    break;

                                case "CRExpired":
                                    BreakdownLevel2Values = Model.Prices.Select(x => x.CRExpired).Distinct().OrderBy(x => x).ToList();

                                    break;

                                case "BucketDaysInInventory":
                                    BreakdownLevel2Values = Model.Prices.Select(x => x.BucketDaysInInventory).Distinct().OrderBy(x => x).ToList();

                                    break;

                                case "StyleName":
                                    BreakdownLevel2Values = Model.Prices.Select(x => x.StyleName).Distinct().OrderBy(x => x).ToList();

                                    break;

                                case "Trim":
                                    BreakdownLevel2Values = Model.Prices.Select(x => x.Trim).Distinct().OrderBy(x => x).ToList();

                                    break;

                                default:
                                    // breakdownLevel1Values = Model.Prices.Select(x => x.DealerId.ToString()).Distinct().OrderBy(x => x).ToList();
                                    break;
                            }


                            foreach (var BreakDown2 in BreakdownLevel2Values)
                            {
                                label2 = "" + BreakDown2;

                                BreakDown2filteredPrices = new List<Report_PricingRange.Models.PricedVehicle>();
                                BreakDown2filteredSupply = new List<Report_PricingRange.Models.PricedVehicle>();

                                switch (Model.BreakDownLevel2)
                                {
                                    case "ModelName":
                                        BreakDown2filteredPrices = BreakDown1filteredPrices.FindAll(x => x.ModelName == BreakDown2);
                                        BreakDown2filteredSupply = BreakDown1filteredSupply.FindAll(x => x.ModelName == BreakDown2);
                                        BreakDownLevel2Model = BreakDown2;
                                        break;
                                    case "ModelCode":
                                        BreakDown2filteredPrices = BreakDown1filteredPrices.FindAll(x => x.ModelCode == BreakDown2);
                                        BreakDown2filteredSupply = BreakDown1filteredSupply.FindAll(x => x.ModelCode == BreakDown2);
                                        BreakDownLevel2ModelCode = BreakDown2;
                                        break;

                                    case "ModelYear":
                                        BreakDown2filteredPrices = BreakDown1filteredPrices.FindAll(x => x.ModelYearString == BreakDown2);
                                        BreakDown2filteredSupply = BreakDown1filteredSupply.FindAll(x => x.ModelYearString == BreakDown2);
                                        BreakdownLevel2ModelYear = BreakDown2;
                                        break;

                                    case "StockNumber":
                                        BreakDown2filteredPrices = BreakDown1filteredPrices.FindAll(x => x.StockNumber == BreakDown2);
                                        BreakDown2filteredSupply = BreakDown1filteredSupply.FindAll(x => x.StockNumber == BreakDown2);
                                        BreakDownLevel2Stock = BreakDown2;
                                        break;

                                    case "VehicleStatus":
                                        BreakDown2filteredPrices = BreakDown1filteredPrices.FindAll(x => x.VehicleStatus == BreakDown2);
                                        BreakDown2filteredSupply = BreakDown1filteredSupply.FindAll(x => x.VehicleStatus == BreakDown2);
                                        BreakDownLevel2VehicleStatus = BreakDown2;
                                        break;

                                    case "MakeName":
                                        BreakDown2filteredPrices = BreakDown1filteredPrices.FindAll(x => x.MakeName == BreakDown2);
                                        BreakDown2filteredSupply = BreakDown1filteredSupply.FindAll(x => x.MakeName == BreakDown2);
                                        BreakDownLevel2Make = BreakDown2;
                                        break;

                                    case "MatrixPricing":
                                        BreakDown2filteredPrices = BreakDown1filteredPrices.FindAll(x => x.MatrixPricing == BreakDown2);
                                        BreakDown2filteredSupply = BreakDown1filteredSupply;
                                        BreakDownLevel2Matrix = BreakDown2;
                                        ShowSupplySold_Breakdown2 = false;
                                        break;

                                    case "LocationCode":
                                        BreakDown2filteredPrices = BreakDown1filteredPrices.FindAll(x => x.LocationCode == BreakDown2);
                                        BreakDown2filteredSupply = BreakDown1filteredSupply.FindAll(x => x.LocationCode == BreakDown2);
                                        BreakDownLevel2Location = BreakDown2;

                                        break;

                                    case "CRExpired":
                                        BreakDown2filteredPrices = BreakDown1filteredPrices.FindAll(x => x.CRExpired == BreakDown2);
                                        BreakDown2filteredSupply = BreakDown1filteredSupply;
                                        BreakDownLevel2CRExpired = BreakDown2;
                                        ShowSupplySold_Breakdown2 = false;

                                        break;

                                    case "BucketDaysInInventory":
                                        BreakDown2filteredPrices = BreakDown1filteredPrices.FindAll(x => x.BucketDaysInInventory == BreakDown2);
                                        BreakDown2filteredSupply = BreakDown1filteredSupply;
                                        BreakDownLevel2BucketDaysInInventory = BreakDown2;
                                        ShowSupplySold_Breakdown2 = false;

                                        break;

                                    case "StyleName":
                                        BreakDown2filteredPrices = BreakDown1filteredPrices.FindAll(x => x.StyleName == BreakDown2);
                                        BreakDown2filteredSupply = BreakDown1filteredSupply.FindAll(x => x.StyleName == BreakDown2);
                                        BreakDownLevel2Style = BreakDown2;
                                        ShowSupplySold_Breakdown2 = false;

                                        break;

                                    case "Trim":
                                        BreakDown2filteredPrices = BreakDown1filteredPrices.FindAll(x => x.Trim == BreakDown2);
                                        BreakDown2filteredSupply = BreakDown1filteredSupply.FindAll(x => x.Trim == BreakDown2);
                                        BreakDownLevel2Trim = BreakDown2;

                                        break;


                                    default:
                                        break;
                                }


                                BreakDown2InStockStatus1 = 0;
                                BreakDown2InStockStatus2 = 0;

                                BreakDown2InStockStatus3 = 0;
                                BreakDown2InStockStatus4 = 0;
                                BreakDown2InStockStatus5 = 0;
                                BreakDown2InStockStatusTotal = 0;

                                BreakDown2OnOrderStatus1 = 0;
                                BreakDown2OnOrderStatus2 = 0;

                                BreakDown2OnOrderStatus3 = 0;
                                BreakDown2OnOrderStatus4 = 0;
                                BreakDown2OnOrderStatus5 = 0;
                                BreakDown2OnOrderStatusTotal = 0;
                                BreakDown2Total = 0;
                                BreakDown2Supply = 0;
                                BreakDown2OutOfStock = 0;
                                BreakDown2InStockInvoiceTotal = 0;

                                // supply

                                BreakDown2Supply = BreakDown2filteredSupply.Sum(x => x.Cars);



                                BreakDown2data = BreakDown2filteredPrices.FindAll(x => x.PricingStatus == "InStock1");
                                BreakDown2InStockStatus1 = BreakDown2data.Sum(x => x.Id);
                                BreakDown2data = BreakDown2filteredPrices.FindAll(x => x.PricingStatus == "InStock2");
                                BreakDown2InStockStatus2 = BreakDown2data.Sum(x => x.Id);
                                BreakDown2data = BreakDown2filteredPrices.FindAll(x => x.PricingStatus == "InStock3");
                                BreakDown2InStockStatus3 = BreakDown2data.Sum(x => x.Id);
                                BreakDown2data = BreakDown2filteredPrices.FindAll(x => x.PricingStatus == "InStock5");
                                BreakDown2InStockStatus5 = BreakDown2data.Sum(x => x.Id);
                                BreakDown2InStockStatusTotal = BreakDown2InStockStatus1 + BreakDown2InStockStatus2 + BreakDown2InStockStatus3 + BreakDown2InStockStatus4 + BreakDown2InStockStatus5;


                                BreakDown2data = BreakDown2filteredPrices.FindAll(x => x.PricingStatus == "OnOrder1");
                                BreakDown2OnOrderStatus1 = BreakDown2data.Sum(x => x.Id);
                                BreakDown2data = BreakDown2filteredPrices.FindAll(x => x.PricingStatus == "OnOrder2");
                                BreakDown2OnOrderStatus2 = BreakDown2data.Sum(x => x.Id);
                                BreakDown2data = BreakDown2filteredPrices.FindAll(x => x.PricingStatus == "OnOrder3");
                                BreakDown2OnOrderStatus3 = BreakDown2data.Sum(x => x.Id);
                                BreakDown2data = BreakDown2filteredPrices.FindAll(x => x.PricingStatus == "OnOrder5");
                                BreakDown2OnOrderStatus5 = BreakDown2data.Sum(x => x.Id);
                                BreakDown2OnOrderStatusTotal = BreakDown2OnOrderStatus1 + BreakDown2OnOrderStatus2 + BreakDown2OnOrderStatus3 + BreakDown2OnOrderStatus4 + BreakDown2OnOrderStatus5;
                                BreakDown2Total = BreakDown2OnOrderStatusTotal + BreakDown2InStockStatusTotal;
                                BreakDown2InStockInvoiceTotal = BreakDown2filteredPrices.Sum(x => x.InvoiceTotal);
                                sBreakDown2InStockInvoiceTotal = BreakDown2InStockInvoiceTotal.ToString("c0");

                                BreakDown2data = BreakDown2filteredPrices.FindAll(x => x.PricingStatus == "SoldOut");
                                // SoldOut pricing status = dummy record for out of stock item
                                BreakDown2OutOfStock = BreakDown2data.Sum(x => x.Id);

                                BreakDown2Supply_Caption = "";
                                Supply30Day_BreakDown2 = 0;
                                Supply30Day_Caption2 = "";

                                Supply30Day_Caption2 = "Err";
                                BreakDown2Supply_Caption = BreakDown2Supply.ToString("N0");
                                if (BreakDown2Supply > 0)
                                {
                                    Supply30Day_BreakDown2 = ((30 / BreakDown2Supply) * BreakDown2InStockStatusTotal);
                                    Supply30Day_Caption2 = Supply30Day_BreakDown2.ToString("N1");
                                }

                                if (ShowSupplySold_Breakdown2 == false)
                                {
                                    BreakDown2Supply_Caption = "";
                                    Supply30Day_Caption2 = "";
                                }

                                if (BreakDown2filteredPrices.Count > 0 | BreakDown2Supply > 0)
                                {
    <tr class="location-bd1-collapse-@Breakdown1Index collapse out location-bd2-data-row-@BreakDown2Index @label2.Replace(" ", "-").Replace(".","-").Replace("/","-").Replace("'","-").Replace("*","-").Replace("(","-").Replace(")","-")" data-collapse="location-bd2-collapse-@BreakDown2Index">

        <td class="divider-column indent-td2"><a data-toggle="collapse" id="location-bd2-collapse-@BreakDown2Index" style="cursor: pointer;" class="location-bd2-collapse-@BreakDown2Index-href collapsed indent-2" data-target=".location-bd2-collapse-@BreakDown2Index">@label2 </a></td>

        <td class="text-center">@BreakDown2Supply_Caption</td>
        <td class="divider-column text-center">
            @Supply30Day_Caption2
        </td>

        <td class="text-center">
            @{ if ((BreakDown2InStockStatus1 == 0) | (bPrintFormat != false))
                {
                    @BreakDown2InStockStatus1
                }
                else
                {

                    @Html.ActionLink("" + BreakDown2InStockStatus1, "ViewVehicles", new
               {
                   pstat = "InStock1",
                   locd = BreakDownLevel2Location,
                   stckn = BreakDownLevel2Stock,
                   Make = BreakDownLevel2Make,
                   mdlv = BreakDownLevel2Model,
                   mxyn = BreakDownLevel2Matrix,
                   crx = BreakDownLevel2CRExpired,
                   styln = BreakDownLevel2Style,
                   trmnm = BreakDownLevel2Trim,
                   bDay = BreakDownLevel2BucketDaysInInventory
                      ,
                   yr = BreakdownLevel2ModelYear,
                   mc = BreakDownLevel2ModelCode
           ,
                   x2 = bExclStatus2
           ,
                   vs = BreakDownLevel2VehicleStatus
                                                            ,
                   usedOrNew = Model.ReportType

               }, new { target = "_blank" })
                }
            }

        </td>
        <td class="text-center">
            @{ if ((BreakDown2InStockStatus2 == 0) | (bPrintFormat != false))
                {
                    @BreakDown2InStockStatus2
                }
                else
                {

                    @Html.ActionLink("" + BreakDown2InStockStatus2, "ViewVehicles", new
               {
                   pstat = "InStock2",
                   locd = BreakDownLevel2Location,
                   stckn = BreakDownLevel2Stock,
                   Make = BreakDownLevel2Make,
                   mdlv = BreakDownLevel2Model,
                   mxyn = BreakDownLevel2Matrix,
                   crx = BreakDownLevel2CRExpired,
                   styln = BreakDownLevel2Style,
                   trmnm = BreakDownLevel2Trim,
                   bDay = BreakDownLevel2BucketDaysInInventory
                       ,
                   yr = BreakdownLevel2ModelYear,
                   mc = BreakDownLevel2ModelCode
,
                   x2 = bExclStatus2
           ,
                   vs = BreakDownLevel2VehicleStatus
                                                       ,
                   usedOrNew = Model.ReportType

               }, new { target = "_blank" }) }
            }

        </td>

        <td class="text-center">
            @{ if ((BreakDown2InStockStatus3 == 0) | (bPrintFormat != false))
                {
                    @BreakDown2InStockStatus3
                }
                else
                {

                    @Html.ActionLink("" + BreakDown2InStockStatus3, "ViewVehicles", new
               {
                   pstat = "InStock3",
                   locd = BreakDownLevel2Location,
                   stckn = BreakDownLevel2Stock,
                   Make = BreakDownLevel2Make,
                   mdlv = BreakDownLevel2Model,
                   mxyn = BreakDownLevel2Matrix,
                   crx = BreakDownLevel2CRExpired,
                   styln = BreakDownLevel2Style,
                   trmnm = BreakDownLevel2Trim,
                   bDay = BreakDownLevel2BucketDaysInInventory,
                   yr = BreakdownLevel2ModelYear,
                   mc = BreakDownLevel2ModelCode

,
                   x2 = bExclStatus2
           ,
                   vs = BreakDownLevel2VehicleStatus
                                                       ,
                   usedOrNew = Model.ReportType

               }, new { target = "_blank" }) }
            }

        </td>
        <td class="text-center">
            @{ if ((BreakDown2InStockStatus5 == 0) | (bPrintFormat != false))
                {
                    @BreakDown2InStockStatus5
                }
                else
                {

                    @Html.ActionLink("" + BreakDown2InStockStatus5, "ViewVehicles", new
               {
                   pstat = "InStock5",
                   locd = BreakDownLevel2Location,
                   stckn = BreakDownLevel2Stock,
                   Make = BreakDownLevel2Make,
                   mdlv = BreakDownLevel2Model,
                   mxyn = BreakDownLevel2Matrix,
                   crx = BreakDownLevel2CRExpired,
                   styln = BreakDownLevel2Style,
                   trmnm = BreakDownLevel2Trim,
                   bDay = BreakDownLevel2BucketDaysInInventory,
                   yr = BreakdownLevel2ModelYear,
                   mc = BreakDownLevel2ModelCode

,
                   x2 = bExclStatus2
           ,
                   vs = BreakDownLevel2VehicleStatus
                                                       ,
                   usedOrNew = Model.ReportType

               }, new { target = "_blank" }) }
            }

        </td>
        <td class="divider-column text-center">
            @{ if ((BreakDown2InStockStatusTotal == 0) | (bPrintFormat != false))
                {
                    @BreakDown2InStockStatusTotal
                }
                else
                {

                    @Html.ActionLink("" + BreakDown2InStockStatusTotal, "ViewVehicles", new
               {
                   pstat = "InStock",
                   locd = BreakDownLevel2Location,
                   stckn = BreakDownLevel2Stock,
                   Make = BreakDownLevel2Make,
                   mdlv = BreakDownLevel2Model,
                   mxyn = BreakDownLevel2Matrix,
                   crx = BreakDownLevel2CRExpired,
                   styln = BreakDownLevel2Style,
                   trmnm = BreakDownLevel2Trim,
                   bDay = BreakDownLevel2BucketDaysInInventory,
                   yr = BreakdownLevel2ModelYear,
                   mc = BreakDownLevel2ModelCode

,
                   x2 = bExclStatus2
           ,
                   vs = BreakDownLevel2VehicleStatus
                                                       ,
                   usedOrNew = Model.ReportType

               }, new { target = "_blank" }) }
            }

        </td>


        <td class="divider-column text-center">
            @{ if ((BreakDown2InStockInvoiceTotal == 0) | (bPrintFormat != false))
                {
                    @sBreakDown2InStockInvoiceTotal
                }
                else
                {

                    @Html.ActionLink("" + sBreakDown2InStockInvoiceTotal, "ViewVehicles", new
               {
                   pstat = "InStock",
                   locd = BreakDownLevel2Location,
                   stckn = BreakDownLevel2Stock,
                   Make = BreakDownLevel2Make,
                   mdlv = BreakDownLevel2Model,
                   mxyn = BreakDownLevel2Matrix,
                   crx = BreakDownLevel2CRExpired,
                   styln = BreakDownLevel2Style,
                   trmnm = BreakDownLevel2Trim,
                   bDay = BreakDownLevel2BucketDaysInInventory,
                   yr = BreakdownLevel2ModelYear,
                   mc = BreakDownLevel2ModelCode
                         ,
                   x2 = bExclStatus2
                   ,
                   vs = BreakDownLevel2VehicleStatus
                                                            ,
                   usedOrNew = Model.ReportType

               }, new { target = "_blank" })
                }
            }

        </td>

        <td class="text-center">
            @{ if ((BreakDown2OnOrderStatus1 == 0) | (bPrintFormat != false))
                {
                    @BreakDown2OnOrderStatus1
                }
                else
                {

                    @Html.ActionLink("" + BreakDown2OnOrderStatus1, "ViewVehicles", new
               {
                   pstat = "OnOrder1",
                   locd = BreakDownLevel2Location,
                   stckn = BreakDownLevel2Stock,
                   Make = BreakDownLevel2Make,
                   mdlv = BreakDownLevel2Model,
                   mxyn = BreakDownLevel2Matrix,
                   crx = BreakDownLevel2CRExpired,
                   styln = BreakDownLevel2Style,
                   trmnm = BreakDownLevel2Trim,
                   bDay = BreakDownLevel2BucketDaysInInventory,
                   yr = BreakdownLevel2ModelYear,
                   mc = BreakDownLevel2ModelCode

,
                   x2 = bExclStatus2
           ,
                   vs = BreakDownLevel2VehicleStatus
                                                       ,
                   usedOrNew = Model.ReportType

               }, new { target = "_blank" }) }
            }

        </td>
        <td class="text-center">
            @{ if ((BreakDown2OnOrderStatus2 == 0) | (bPrintFormat != false))
                {
                    @BreakDown2OnOrderStatus2
                }
                else
                {

                    @Html.ActionLink("" + BreakDown2OnOrderStatus2, "ViewVehicles", new
               {
                   pstat = "OnOrder2",
                   locd = BreakDownLevel2Location,
                   stckn = BreakDownLevel2Stock,
                   Make = BreakDownLevel2Make,
                   mdlv = BreakDownLevel2Model,
                   mxyn = BreakDownLevel2Matrix,
                   crx = BreakDownLevel2CRExpired,
                   styln = BreakDownLevel2Style,
                   trmnm = BreakDownLevel2Trim,
                   bDay = BreakDownLevel2BucketDaysInInventory,
                   yr = BreakdownLevel2ModelYear,
                   mc = BreakDownLevel2ModelCode

,
                   x2 = bExclStatus2
           ,
                   vs = BreakDownLevel2VehicleStatus
                                                       ,
                   usedOrNew = Model.ReportType

               }, new { target = "_blank" }) }
            }

        </td>

        <td class="text-center">
            @{ if ((BreakDown2OnOrderStatus3 == 0) | (bPrintFormat != false))
                {
                    @BreakDown2OnOrderStatus3
                }
                else
                {

                    @Html.ActionLink("" + BreakDown2OnOrderStatus3, "ViewVehicles", new
               {
                   pstat = "OnOrder3",
                   locd = BreakDownLevel2Location,
                   stckn = BreakDownLevel2Stock,
                   Make = BreakDownLevel2Make,
                   mdlv = BreakDownLevel2Model,
                   mxyn = BreakDownLevel2Matrix,
                   crx = BreakDownLevel2CRExpired,
                   styln = BreakDownLevel2Style,
                   trmnm = BreakDownLevel2Trim,
                   bDay = BreakDownLevel2BucketDaysInInventory,
                   yr = BreakdownLevel2ModelYear,
                   mc = BreakDownLevel2ModelCode

,
                   x2 = bExclStatus2
           ,
                   vs = BreakDownLevel2VehicleStatus
                                                       ,
                   usedOrNew = Model.ReportType

               }, new { target = "_blank" }) }
            }

        </td>
        <td class="text-center">
            @{ if ((BreakDown2OnOrderStatus5 == 0) | (bPrintFormat != false))
                {
                    @BreakDown2OnOrderStatus5
                }
                else
                {

                    @Html.ActionLink("" + BreakDown2OnOrderStatus5, "ViewVehicles", new
               {
                   pstat = "OnOrder5",
                   locd = BreakDownLevel2Location,
                   stckn = BreakDownLevel2Stock,
                   Make = BreakDownLevel2Make,
                   mdlv = BreakDownLevel2Model,
                   mxyn = BreakDownLevel2Matrix,
                   crx = BreakDownLevel2CRExpired,
                   styln = BreakDownLevel2Style,
                   trmnm = BreakDownLevel2Trim,
                   bDay = BreakDownLevel2BucketDaysInInventory,
                   yr = BreakdownLevel2ModelYear,
                   mc = BreakDownLevel2ModelCode

,
                   x2 = bExclStatus2
           ,
                   vs = BreakDownLevel2VehicleStatus
                                                       ,
                   usedOrNew = Model.ReportType

               }, new { target = "_blank" }) }
            }

        </td>
        <td class="divider-column text-center">
            @{ if ((BreakDown2OnOrderStatusTotal == 0) | (bPrintFormat != false))
                {
                    @BreakDown2OnOrderStatusTotal
                }
                else
                {

                    @Html.ActionLink("" + BreakDown2OnOrderStatusTotal, "ViewVehicles", new
               {
                   pstat = "OnOrder",
                   locd = BreakDownLevel2Location,
                   stckn = BreakDownLevel2Stock,
                   Make = BreakDownLevel2Make,
                   mdlv = BreakDownLevel2Model,
                   mxyn = BreakDownLevel2Matrix,
                   crx = BreakDownLevel2CRExpired,
                   styln = BreakDownLevel2Style,
                   trmnm = BreakDownLevel2Trim,
                   bDay = BreakDownLevel2BucketDaysInInventory,
                   yr = BreakdownLevel2ModelYear,
                   mc = BreakDownLevel2ModelCode

,
                   x2 = bExclStatus2
           ,
                   vs = BreakDownLevel2VehicleStatus
                                                       ,
                   usedOrNew = Model.ReportType

               }, new { target = "_blank" }) }
            }

        </td>
        <td class="divider-column text-center">
            @{ if ((BreakDown2Total == 0) | (bPrintFormat != false))
                {
                    @BreakDown2Total
                }
                else
                {

                    @Html.ActionLink("" + BreakDown2Total, "ViewVehicles", new
               {
                   pstat = "",
                   locd = BreakDownLevel2Location,
                   stckn = BreakDownLevel2Stock,
                   Make = BreakDownLevel2Make,
                   mdlv = BreakDownLevel2Model,
                   mxyn = BreakDownLevel2Matrix,
                   crx = BreakDownLevel2CRExpired,
                   styln = BreakDownLevel2Style,
                   trmnm = BreakDownLevel2Trim,
                   bDay = BreakDownLevel2BucketDaysInInventory,
                   yr = BreakdownLevel2ModelYear,
                   mc = BreakDownLevel2ModelCode

,
                   x2 = bExclStatus2
           ,
                   vs = BreakDownLevel2VehicleStatus
                                                       ,
                   usedOrNew = Model.ReportType

               }, new { target = "_blank" }) }
            }

        </td>


    </tr>
                            }



                            BreakDownLevel3Location = "" + BreakDownLevel2Location;
                            BreakDownLevel3Model = "" + BreakDownLevel2Model;
                            BreakDownLevel3Make = "" + BreakDownLevel2Make;
                            BreakDownLevel3Matrix = "" + BreakDownLevel2Matrix;
                            BreakDownLevel3Stock = "" + BreakDownLevel2Stock;
                            BreakDownLevel3CRExpired = "" + BreakDownLevel2CRExpired;
                            BreakDownLevel3BucketDaysInInventory = "" + BreakDownLevel2BucketDaysInInventory;
                            BreakDownLevel3Style = "" + BreakDownLevel2Style;
                            BreakDownLevel3Trim = "" + BreakDownLevel2Trim;
                            BreakdownLevel3ModelYear = "" + BreakdownLevel2ModelYear;
                            BreakDownLevel3ModelCode = "" + BreakDownLevel2ModelCode;
                            ShowSupplySold_Breakdown3 = true;


                            switch (Model.BreakDownLevel3)
                            {
                                case "ModelName":
                                    BreakdownLevel3Values = Model.Prices.Select(x => x.ModelName).Distinct().OrderBy(x => x).ToList();
                                    break;
                                case "ModelCode":
                                    BreakdownLevel3Values = Model.Prices.Select(x => x.ModelCode).OrderBy(x => x).ToList();
                                    break;

                                case "ModelYear":
                                    BreakdownLevel3Values = Model.Prices.Select(x => x.ModelYearString).Distinct().OrderBy(x => x).ToList();
                                    break;

                                case "StockNumber":
                                    BreakdownLevel3Values = Model.Prices.Select(x => x.StockNumber).Distinct().OrderBy(x => x).ToList();
                                    break;

                                case "VehicleStatus":
                                    BreakdownLevel3Values = Model.Prices.Select(x => x.VehicleStatus).Distinct().OrderBy(x => x.AsInt()).ToList();
                                    break;

                                case "MakeName":
                                    BreakdownLevel3Values = Model.Prices.Select(x => x.MakeName).Distinct().OrderBy(x => x).ToList();
                                    break;

                                case "MatrixPricing":
                                    BreakdownLevel3Values = Model.Prices.Select(x => x.MatrixPricing).Distinct().OrderBy(x => x).ToList();
                                    break;

                                case "LocationCode":
                                    BreakdownLevel3Values = Model.Prices.Select(x => x.LocationCode).Distinct().OrderBy(x => x).ToList();
                                    break;

                                case "CRExpired":
                                    BreakdownLevel3Values = Model.Prices.Select(x => x.CRExpired).Distinct().OrderBy(x => x).ToList();

                                    break;

                                case "BucketDaysInInventory":
                                    BreakdownLevel3Values = Model.Prices.Select(x => x.BucketDaysInInventory).Distinct().OrderBy(x => x).ToList();

                                    break;

                                case "StyleName":
                                    BreakdownLevel3Values = Model.Prices.Select(x => x.StyleName).Distinct().OrderBy(x => x).ToList();

                                    break;

                                case "Trim":
                                    BreakdownLevel3Values = Model.Prices.Select(x => x.Trim).Distinct().OrderBy(x => x).ToList();
                                    break;

                                default:
                                    break;
                            }

                            foreach (var BreakDown3 in BreakdownLevel3Values)
                            {
                                label3 = "" + BreakDown3;

                                BreakDown3filteredPrices = new List<Report_PricingRange.Models.PricedVehicle>
                                   ();

                                BreakDown3filteredSupply = new List<Report_PricingRange.Models.PricedVehicle>();


                                switch (Model.BreakDownLevel3)
                                {
                                    case "ModelName":
                                        BreakDown3filteredPrices = BreakDown2filteredPrices.FindAll(x => x.ModelName == BreakDown3);
                                        BreakDown3filteredSupply = BreakDown2filteredSupply.FindAll(x => x.ModelName == BreakDown3);
                                        BreakDownLevel3Model = BreakDown3;
                                        break;

                                    case "ModelCode":
                                        BreakDown3filteredPrices = BreakDown2filteredPrices.FindAll(x => x.ModelCode == BreakDown3);
                                        BreakDown3filteredSupply = BreakDown2filteredSupply.FindAll(x => x.ModelCode == BreakDown3);
                                        BreakDownLevel3ModelCode = BreakDown3;
                                        break;

                                    case "ModelYear":
                                        BreakDown3filteredPrices = BreakDown2filteredPrices.FindAll(x => x.ModelYearString == BreakDown3);
                                        BreakDown3filteredSupply = BreakDown2filteredSupply.FindAll(x => x.ModelYearString == BreakDown3);
                                        BreakdownLevel3ModelYear = BreakDown3;
                                        break;

                                    case "StockNumber":
                                        BreakDown3filteredPrices = BreakDown2filteredPrices.FindAll(x => x.StockNumber == BreakDown3);
                                        BreakDown3filteredSupply = BreakDown2filteredSupply.FindAll(x => x.StockNumber == BreakDown3);
                                        BreakDownLevel3Stock = BreakDown3;
                                        break;

                                    case "VehicleStatus":
                                        BreakDown3filteredPrices = BreakDown2filteredPrices.FindAll(x => x.VehicleStatus == BreakDown3);
                                        BreakDown3filteredSupply = BreakDown2filteredSupply.FindAll(x => x.VehicleStatus == BreakDown3);
                                        BreakDownLevel3VehicleStatus = BreakDown3;
                                        break;

                                    case "MakeName":
                                        BreakDown3filteredPrices = BreakDown2filteredPrices.FindAll(x => x.MakeName == BreakDown3);
                                        BreakDown3filteredSupply = BreakDown2filteredSupply.FindAll(x => x.MakeName == BreakDown3);
                                        BreakDownLevel3Make = BreakDown3;
                                        break;

                                    case "MatrixPricing":
                                        BreakDown3filteredPrices = BreakDown2filteredPrices.FindAll(x => x.MatrixPricing == BreakDown3);
                                        BreakDown3filteredSupply = BreakDown2filteredSupply;
                                        BreakDownLevel3Matrix = BreakDown3;
                                        ShowSupplySold_Breakdown3 = false;
                                        break;

                                    case "LocationCode":
                                        BreakDown3filteredPrices = BreakDown2filteredPrices.FindAll(x => x.LocationCode == BreakDown3);
                                        BreakDown3filteredSupply = BreakDown2filteredSupply.FindAll(x => x.LocationCode == BreakDown3);
                                        BreakDownLevel3Location = BreakDown3;

                                        break;

                                    case "CRExpired":
                                        BreakDown3filteredPrices = BreakDown2filteredPrices.FindAll(x => x.CRExpired == BreakDown3);
                                        BreakDown3filteredSupply = BreakDown2filteredSupply;
                                        BreakDownLevel3CRExpired = BreakDown3;
                                        ShowSupplySold_Breakdown3 = false;

                                        break;

                                    case "BucketDaysInInventory":
                                        BreakDown3filteredPrices = BreakDown2filteredPrices.FindAll(x => x.BucketDaysInInventory == BreakDown3);
                                        BreakDown3filteredSupply = BreakDown2filteredSupply;
                                        BreakDownLevel3BucketDaysInInventory = BreakDown3;
                                        ShowSupplySold_Breakdown3 = false;

                                        break;

                                    case "StyleName":
                                        BreakDown3filteredPrices = BreakDown2filteredPrices.FindAll(x => x.StyleName == BreakDown3);
                                        BreakDown3filteredSupply = BreakDown2filteredSupply.FindAll(x => x.StyleName == BreakDown3);
                                        BreakDownLevel3Style = BreakDown3;
                                        ShowSupplySold_Breakdown3 = false;

                                        break;

                                    case "Trim":
                                        BreakDown3filteredPrices = BreakDown2filteredPrices.FindAll(x => x.Trim == BreakDown3);
                                        BreakDown3filteredSupply = BreakDown2filteredSupply.FindAll(x => x.Trim == BreakDown3);
                                        BreakDownLevel3Trim = BreakDown3;
                                        ShowSupplySold_Breakdown3 = false;

                                        break;

                                    default:
                                        break;
                                }

                                BreakDown3InStockStatus1 = 0;
                                BreakDown3InStockStatus2 = 0;

                                BreakDown3InStockStatus3 = 0;
                                BreakDown3InStockStatus4 = 0;
                                BreakDown3InStockStatus5 = 0;
                                BreakDown3InStockStatusTotal = 0;

                                BreakDown3OnOrderStatus1 = 0;
                                BreakDown3OnOrderStatus2 = 0;

                                BreakDown3OnOrderStatus3 = 0;
                                BreakDown3OnOrderStatus4 = 0;
                                BreakDown3OnOrderStatus5 = 0;
                                BreakDown3OnOrderStatusTotal = 0;
                                BreakDown3Total = 0;
                                BreakDown3Supply = 0;
                                BreakDown3InStockInvoiceTotal = 0;

                                // supply

                                BreakDown3Supply = BreakDown3filteredSupply.Sum(x => x.Cars);


                                BreakDown3data = BreakDown3filteredPrices.FindAll(x => x.PricingStatus == "InStock1");
                                BreakDown3InStockStatus1 = BreakDown3data.Sum(x => x.Id);
                                BreakDown3data = BreakDown3filteredPrices.FindAll(x => x.PricingStatus == "InStock2");
                                BreakDown3InStockStatus2 = BreakDown3data.Sum(x => x.Id);
                                BreakDown3data = BreakDown3filteredPrices.FindAll(x => x.PricingStatus == "InStock3");
                                BreakDown3InStockStatus3 = BreakDown3data.Sum(x => x.Id);
                                BreakDown3data = BreakDown3filteredPrices.FindAll(x => x.PricingStatus == "InStock5");
                                BreakDown3InStockStatus5 = BreakDown3data.Sum(x => x.Id);
                                BreakDown3InStockStatusTotal = BreakDown3InStockStatus1 + BreakDown3InStockStatus2 + BreakDown3InStockStatus3 + BreakDown3InStockStatus4 + BreakDown3InStockStatus5;

                                BreakDown3data = BreakDown3filteredPrices.FindAll(x => x.PricingStatus == "OnOrder1");
                                BreakDown3OnOrderStatus1 = BreakDown3data.Sum(x => x.Id);
                                BreakDown3data = BreakDown3filteredPrices.FindAll(x => x.PricingStatus == "OnOrder2");
                                BreakDown3OnOrderStatus2 = BreakDown3data.Sum(x => x.Id);
                                BreakDown3data = BreakDown3filteredPrices.FindAll(x => x.PricingStatus == "OnOrder3");
                                BreakDown3OnOrderStatus3 = BreakDown3data.Sum(x => x.Id);
                                BreakDown3data = BreakDown3filteredPrices.FindAll(x => x.PricingStatus == "OnOrder5");
                                BreakDown3OnOrderStatus5 = BreakDown3data.Sum(x => x.Id);
                                BreakDown3InStockInvoiceTotal = BreakDown3filteredPrices.Sum(x => x.InvoiceTotal);
                                sBreakDown3InStockInvoiceTotal = BreakDown3InStockInvoiceTotal.ToString("c0");

                                BreakDown3OnOrderStatusTotal = BreakDown3OnOrderStatus1 + BreakDown3OnOrderStatus2 + BreakDown3OnOrderStatus3 + BreakDown3OnOrderStatus4 + BreakDown3OnOrderStatus5;
                                BreakDown3Total = BreakDown3OnOrderStatusTotal + BreakDown3InStockStatusTotal;
                                Supply30Day_BreakDown3 = 0;
                                Supply30Day_Caption3 = "";

                                Supply30Day_Caption3 = "Err";
                                BreakDown3Supply_Caption = BreakDown3Supply.ToString("N0");

                                if (BreakDown3Supply > 0)
                                {
                                    Supply30Day_BreakDown3 = ((30 / BreakDown3Supply) * BreakDown3InStockStatusTotal);
                                    Supply30Day_Caption3 = Supply30Day_BreakDown3.ToString("N1");
                                }

                                if (ShowSupplySold_Breakdown3 == false)
                                {
                                    BreakDown3Supply_Caption = "";
                                    Supply30Day_Caption3 = "";
                                }

                                if (((BreakDown3Total > 0) | (BreakDown3Supply > 0)) && (previous_label3 != label3))
                                {
                                    previous_label3= label3;
                            <tr class="location-bd2-collapse-@BreakDown2Index collapse out location-bd3-data-row-@BreakDown3Index @label3.Replace(" ", "-").Replace(".", "-").Replace("/", "-").Replace("'", "-").Replace("*", "-").Replace("(", "-").Replace(")", "-")" data-collapse="location-bd3-collapse-@BreakDown3Index">

                                <td class="divider-column indent-td3"><a data-toggle="collapse" id="location-bd3-collapse-@BreakDown3Index" style="cursor: pointer;" class="location-bd3-collapse-@BreakDown3Index-href collapsed indent-3" data-target=".location-bd3-collapse-@BreakDown3Index">@label3 </a></td>
                                <td class="text-center">
                                    @BreakDown3Supply_Caption
                                </td>
                                <td class="divider-column text-center">
                                    @Supply30Day_Caption3
                                </td>
                                <td class="text-center">
                                    @{ if ((BreakDown3InStockStatus1 == 0) | (bPrintFormat != false))
                                        {
                                            @BreakDown3InStockStatus1
                    }
                                        else
                                        {

                                            @Html.ActionLink("" + BreakDown3InStockStatus1, "ViewVehicles", new
                                       {
                                           pstat = "InStock1",
                                           locd = BreakDownLevel3Location,
                                           stckn = BreakDownLevel3Stock,
                                           Make = BreakDownLevel3Make,
                                           mdlv = BreakDownLevel3Model,
                                           mxyn = BreakDownLevel3Matrix,
                                           crx = BreakDownLevel3CRExpired,
                                           styln = BreakDownLevel3Style,
                                           trmnm = BreakDownLevel3Trim,
                                           bDay = BreakDownLevel3BucketDaysInInventory,
                                           yr = BreakdownLevel3ModelYear,
                                           mc = BreakDownLevel3ModelCode
                        ,
                                           x2 = bExclStatus2
                               ,
                                           vs = BreakDownLevel3VehicleStatus
                                                                               ,
                                           usedOrNew = Model.ReportType

                                       }, new { target = "_blank" }) }
                                    }

                                </td>
                                <td class="text-center">
                                    @{ if ((BreakDown3InStockStatus2 == 0) | (bPrintFormat != false))
                    {
                        @BreakDown3InStockStatus2
                                        }
                    else
                    {

                        @Html.ActionLink("" + BreakDown3InStockStatus2, "ViewVehicles", new
                   {
                       pstat = "InStock2",
                       locd = BreakDownLevel3Location,
                       stckn = BreakDownLevel3Stock,
                       Make = BreakDownLevel3Make,
                       mdlv = BreakDownLevel3Model,
                       mxyn = BreakDownLevel3Matrix,
                       crx = BreakDownLevel3CRExpired,
                       styln = BreakDownLevel3Style,
                       trmnm = BreakDownLevel3Trim,
                       bDay = BreakDownLevel3BucketDaysInInventory,
                       yr = BreakdownLevel3ModelYear,
                       mc = BreakDownLevel3ModelCode
    ,
                       x2 = bExclStatus2
           ,
                       vs = BreakDownLevel3VehicleStatus
                                                                ,
                       usedOrNew = Model.ReportType

                   }, new { target = "_blank" }) }
                }

                                </td>

                                <td class="text-center">
                                    @{ if ((BreakDown3InStockStatus3 == 0) | (bPrintFormat != false))
                    {
                        @BreakDown3InStockStatus3
                                        }
                    else
                    {

                        @Html.ActionLink("" + BreakDown3InStockStatus3, "ViewVehicles", new
                   {
                       pstat = "InStock3",
                       locd = BreakDownLevel3Location,
                       stckn = BreakDownLevel3Stock,
                       Make = BreakDownLevel3Make,
                       mdlv = BreakDownLevel3Model,
                       mxyn = BreakDownLevel3Matrix,
                       crx = BreakDownLevel3CRExpired,
                       styln = BreakDownLevel3Style,
                       trmnm = BreakDownLevel3Trim,
                       bDay = BreakDownLevel3BucketDaysInInventory,
                       yr = BreakdownLevel3ModelYear,
                       mc = BreakDownLevel3ModelCode
    ,
                       x2 = bExclStatus2
           ,
                       vs = BreakDownLevel3VehicleStatus
                                                                ,
                       usedOrNew = Model.ReportType

                   }, new { target = "_blank" }) }
                }

                                </td>
                                <td class="text-center">
                                    @{ if ((BreakDown3InStockStatus5 == 0) | (bPrintFormat != false))
                    {
                        @BreakDown3InStockStatus5
                                        }
                    else
                    {

                        @Html.ActionLink("" + BreakDown3InStockStatus5, "ViewVehicles", new
                   {
                       pstat = "InStock5",
                       locd = BreakDownLevel3Location,
                       stckn = BreakDownLevel3Stock,
                       Make = BreakDownLevel3Make,
                       mdlv = BreakDownLevel3Model,
                       mxyn = BreakDownLevel3Matrix,
                       crx = BreakDownLevel3CRExpired,
                       styln = BreakDownLevel3Style,
                       trmnm = BreakDownLevel3Trim,
                       bDay = BreakDownLevel3BucketDaysInInventory,
                       yr = BreakdownLevel3ModelYear,
                       mc = BreakDownLevel3ModelCode
    ,
                       x2 = bExclStatus2
           ,
                       vs = BreakDownLevel3VehicleStatus
                                                                ,
                       usedOrNew = Model.ReportType

                   }, new { target = "_blank" }) }
                }

                                </td>
                                <td class="divider-column text-center">
                                    @{ if ((BreakDown3InStockStatusTotal == 0) | (bPrintFormat != false))
                    {
                        @BreakDown3InStockStatusTotal
                                        }
                    else
                    {

                        @Html.ActionLink("" + BreakDown3InStockStatusTotal, "ViewVehicles", new
                   {
                       pstat = "InStock",
                       locd = BreakDownLevel3Location,
                       stckn = BreakDownLevel3Stock,
                       Make = BreakDownLevel3Make,
                       mdlv = BreakDownLevel3Model,
                       mxyn = BreakDownLevel3Matrix,
                       crx = BreakDownLevel3CRExpired,
                       styln = BreakDownLevel3Style,
                       trmnm = BreakDownLevel3Trim,
                       bDay = BreakDownLevel3BucketDaysInInventory,
                       yr = BreakdownLevel3ModelYear,
                       mc = BreakDownLevel3ModelCode
    ,
                       x2 = bExclStatus2
           ,
                       vs = BreakDownLevel3VehicleStatus
                                                                ,
                       usedOrNew = Model.ReportType

                   }, new { target = "_blank" }) }
                }

                                </td>


                                <td class="divider-column text-center">
                                    @{ if ((BreakDown3InStockInvoiceTotal == 0) | (bPrintFormat != false))
                    {
                        @sBreakDown3InStockInvoiceTotal
                                        }
                    else
                    {

                        @Html.ActionLink("" + sBreakDown3InStockInvoiceTotal, "ViewVehicles", new
                   {
                       pstat = "InStock",
                       locd = BreakDownLevel3Location,
                       stckn = BreakDownLevel3Stock,
                       Make = BreakDownLevel3Make,
                       mdlv = BreakDownLevel3Model,
                       mxyn = BreakDownLevel3Matrix,
                       crx = BreakDownLevel3CRExpired,
                       styln = BreakDownLevel3Style,
                       trmnm = BreakDownLevel3Trim,
                       bDay = BreakDownLevel3BucketDaysInInventory,
                       yr = BreakdownLevel3ModelYear,
                       mc = BreakDownLevel3ModelCode
                             ,
                       x2 = bExclStatus2
                       ,
                       vs = BreakDownLevel3VehicleStatus
                                                                ,
                       usedOrNew = Model.ReportType

                   }, new { target = "_blank" })
                                        }
                }

                                </td>

                                <td class="text-center">
                                    @{ if ((BreakDown3OnOrderStatus1 == 0) | (bPrintFormat != false))
                    {
                        @BreakDown3OnOrderStatus1
                                        }
                    else
                    {

                        @Html.ActionLink("" + BreakDown3OnOrderStatus1, "ViewVehicles", new
                   {
                       pstat = "OnOrder1",
                       locd = BreakDownLevel3Location,
                       stckn = BreakDownLevel3Stock,
                       Make = BreakDownLevel3Make,
                       mdlv = BreakDownLevel3Model,
                       mxyn = BreakDownLevel3Matrix,
                       crx = BreakDownLevel3CRExpired,
                       styln = BreakDownLevel3Style,
                       trmnm = BreakDownLevel3Trim,
                       bDay = BreakDownLevel3BucketDaysInInventory,
                       yr = BreakdownLevel3ModelYear,
                       mc = BreakDownLevel3ModelCode
    ,
                       x2 = bExclStatus2
           ,
                       vs = BreakDownLevel3VehicleStatus
                                                                ,
                       usedOrNew = Model.ReportType

                   }, new { target = "_blank" }) }
                }

                                </td>
                                <td class="text-center">
                                    @{ if ((BreakDown3OnOrderStatus2 == 0) | (bPrintFormat != false))
                    {
                        @BreakDown3OnOrderStatus2
                                        }
                    else
                    {

                        @Html.ActionLink("" + BreakDown3OnOrderStatus2, "ViewVehicles", new
                   {
                       pstat = "OnOrder2",
                       locd = BreakDownLevel3Location,
                       stckn = BreakDownLevel3Stock,
                       Make = BreakDownLevel3Make,
                       mdlv = BreakDownLevel3Model,
                       mxyn = BreakDownLevel3Matrix,
                       crx = BreakDownLevel3CRExpired,
                       styln = BreakDownLevel3Style,
                       trmnm = BreakDownLevel3Trim,
                       bDay = BreakDownLevel3BucketDaysInInventory,
                       yr = BreakdownLevel3ModelYear,
                       mc = BreakDownLevel3ModelCode
    ,
                       x2 = bExclStatus2
           ,
                       vs = BreakDownLevel3VehicleStatus
                                                                ,
                       usedOrNew = Model.ReportType

                   }, new { target = "_blank" }) }
                }

                                </td>

                                <td class="text-center">
                                    @{ if ((BreakDown3OnOrderStatus3 == 0) | (bPrintFormat != false))
                    {
                        @BreakDown3OnOrderStatus3
                                        }
                    else
                    {

                        @Html.ActionLink("" + BreakDown3OnOrderStatus3, "ViewVehicles", new
                   {
                       pstat = "OnOrder3",
                       locd = BreakDownLevel3Location,
                       stckn = BreakDownLevel3Stock,
                       Make = BreakDownLevel3Make,
                       mdlv = BreakDownLevel3Model,
                       mxyn = BreakDownLevel3Matrix,
                       crx = BreakDownLevel3CRExpired,
                       styln = BreakDownLevel3Style,
                       trmnm = BreakDownLevel3Trim,
                       bDay = BreakDownLevel3BucketDaysInInventory,
                       yr = BreakdownLevel3ModelYear,
                       mc = BreakDownLevel3ModelCode
    ,
                       x2 = bExclStatus2
           ,
                       vs = BreakDownLevel3VehicleStatus
                                                                ,
                       usedOrNew = Model.ReportType

                   }, new { target = "_blank" }) }
                }

                                </td>
                                <td class="text-center">
                                    @{ if ((BreakDown3OnOrderStatus5 == 0) | (bPrintFormat != false))
                    {
                        @BreakDown3OnOrderStatus5
                                        }
                    else
                    {

                        @Html.ActionLink("" + BreakDown3OnOrderStatus5, "ViewVehicles", new
                   {
                       pstat = "OnOrder5",
                       locd = BreakDownLevel3Location,
                       stckn = BreakDownLevel3Stock,
                       Make = BreakDownLevel3Make,
                       mdlv = BreakDownLevel3Model,
                       mxyn = BreakDownLevel3Matrix,
                       crx = BreakDownLevel3CRExpired,
                       styln = BreakDownLevel3Style,
                       trmnm = BreakDownLevel3Trim,
                       bDay = BreakDownLevel3BucketDaysInInventory,
                       yr = BreakdownLevel3ModelYear,
                       mc = BreakDownLevel3ModelCode
    ,
                       x2 = bExclStatus2
           ,
                       vs = BreakDownLevel3VehicleStatus
                                                                ,
                       usedOrNew = Model.ReportType

                   }, new { target = "_blank" }) }
                }

                                </td>

                                <td class="divider-column text-center">
                                    @{ if ((BreakDown3OnOrderStatusTotal == 0) | (bPrintFormat != false))
                    {
                        @BreakDown3OnOrderStatusTotal
                                        }
                    else
                    {

                        @Html.ActionLink("" + BreakDown3OnOrderStatusTotal, "ViewVehicles", new
                   {
                       pstat = "OnOrder",
                       locd = BreakDownLevel3Location,
                       stckn = BreakDownLevel3Stock,
                       Make = BreakDownLevel3Make,
                       mdlv = BreakDownLevel3Model,
                       mxyn = BreakDownLevel3Matrix,
                       crx = BreakDownLevel3CRExpired,
                       styln = BreakDownLevel3Style,
                       trmnm = BreakDownLevel3Trim,
                       bDay = BreakDownLevel3BucketDaysInInventory,
                       yr = BreakdownLevel3ModelYear,
                       mc = BreakDownLevel3ModelCode
    ,
                       x2 = bExclStatus2
           ,
                       vs = BreakDownLevel3VehicleStatus
                                                                ,
                       usedOrNew = Model.ReportType

                   }, new { target = "_blank" }) }
                }

                                </td>
                                <td class="divider-column text-center">
                                    @{ if ((BreakDown3Total == 0) | (bPrintFormat != false))
                    {
                        @BreakDown3Total
                                        }
                    else
                    {

                        @Html.ActionLink("" + BreakDown3Total, "ViewVehicles", new
                   {
                       pstat = "",
                       locd = BreakDownLevel3Location,
                       stckn = BreakDownLevel3Stock,
                       Make = BreakDownLevel3Make,
                       mdlv = BreakDownLevel3Model,
                       mxyn = BreakDownLevel3Matrix,
                       crx = BreakDownLevel3CRExpired,
                       styln = BreakDownLevel3Style,
                       trmnm = BreakDownLevel3Trim,
                       bDay = BreakDownLevel3BucketDaysInInventory,
                       yr = BreakdownLevel3ModelYear,
                       mc = BreakDownLevel3ModelCode
    ,
                       x2 = bExclStatus2
           ,
                       vs = BreakDownLevel3VehicleStatus
                                                                ,
                       usedOrNew = Model.ReportType

                   }, new { target = "_blank" }) }
                }

                                </td>


                            </tr>
                                        }

                                        BreakDownLevel4Location = "" + BreakDownLevel3Location;
                BreakDownLevel4Model = "" + BreakDownLevel3Model;
                BreakDownLevel4Make = "" + BreakDownLevel3Make;
                BreakDownLevel4Matrix = "" + BreakDownLevel3Matrix;
                BreakDownLevel4Stock = "" + BreakDownLevel3Stock;
                BreakDownLevel4CRExpired = "" + BreakDownLevel3CRExpired;
                BreakDownLevel4BucketDaysInInventory = "" + BreakDownLevel3BucketDaysInInventory;
                BreakDownLevel4Style = "" + BreakDownLevel3Style;
                BreakDownLevel4Trim = "" + BreakDownLevel3Trim;
                BreakDownLevel4ModelYear = "" + BreakdownLevel3ModelYear;
                BreakDownLevel4ModelCode = "" + BreakDownLevel3ModelCode;
                ShowSupplySold_Breakdown4 = true;

                BreakDown4filteredSupply = new List<Report_PricingRange.Models.PricedVehicle>();

                switch (Model.BreakDownLevel4)
                {
                    case "ModelName":
                        BreakDownLevel4Values = Model.Prices.Select(x => x.ModelName).Distinct().OrderBy(x => x).ToList();
                        break;
                    case "ModelCode":
                        BreakDownLevel4Values = Model.Prices.Select(x => x.ModelCode).Distinct().OrderBy(x => x).ToList();
                        break;
                    case "ModelYear":
                        BreakDownLevel4Values = Model.Prices.Select(x => x.ModelYearString).Distinct().OrderBy(x => x).ToList();
                        break;

                    case "VehicleStatus":
                        BreakDownLevel4Values = Model.Prices.Select(x => x.VehicleStatus).Distinct().OrderBy(x => x.AsInt()).ToList();
                        break;

                    case "StockNumber":
                        BreakDownLevel4Values = Model.Prices.Select(x => x.StockNumber).Distinct().OrderBy(x => x).ToList();
                        break;

                    case "MakeName":
                        BreakDownLevel4Values = Model.Prices.Select(x => x.MakeName).Distinct().OrderBy(x => x).ToList();
                        break;

                    case "MatrixPricing":
                        BreakDownLevel4Values = Model.Prices.Select(x => x.MatrixPricing).Distinct().OrderBy(x => x).ToList();
                        break;

                    case "LocationCode":
                        BreakDownLevel4Values = Model.Prices.Select(x => x.LocationCode).Distinct().OrderBy(x => x).ToList();
                        break;

                    case "CRExpired":
                        BreakDownLevel4Values = Model.Prices.Select(x => x.CRExpired).Distinct().OrderBy(x => x).ToList();

                        break;

                    case "BucketDaysInInventory":
                        BreakDownLevel4Values = Model.Prices.Select(x => x.BucketDaysInInventory).Distinct().OrderBy(x => x).ToList();

                        break;

                    case "StyleName":
                        BreakDownLevel4Values = Model.Prices.Select(x => x.StyleName).Distinct().OrderBy(x => x).ToList();

                        break;

                    case "Trim":
                        BreakDownLevel4Values = Model.Prices.Select(x => x.Trim).Distinct().OrderBy(x => x).ToList();
                        break;

                    default:
                        // breakdownLevel1Values = Model.Prices.Select(x => x.DealerId.ToString()).Distinct().OrderBy(x => x).ToList();
                        break;
                }

                foreach (var BreakDown4 in BreakDownLevel4Values)
                {
                    label4 = "" + BreakDown4;

                    BreakDown4filteredPrices = new List<Report_PricingRange.Models.PricedVehicle>
                       ();

                    switch (Model.BreakDownLevel4)
                    {
                        case "ModelName":
                            BreakDown4filteredPrices = BreakDown3filteredPrices.FindAll(x => x.ModelName == BreakDown4);
                            BreakDown4filteredSupply = BreakDown3filteredSupply.FindAll(x => x.ModelName == BreakDown4);
                            BreakDownLevel4Model = BreakDown4;
                            break;

                        case "ModelCode":
                            BreakDown4filteredPrices = BreakDown3filteredPrices.FindAll(x => x.ModelCode == BreakDown4);
                            BreakDown4filteredSupply = BreakDown3filteredSupply.FindAll(x => x.ModelCode == BreakDown4);
                            BreakDownLevel4ModelCode = BreakDown4;
                            break;

                        case "ModelYear":
                            BreakDown4filteredPrices = BreakDown3filteredPrices.FindAll(x => x.ModelYearString == BreakDown4);
                            BreakDown4filteredSupply = BreakDown3filteredSupply.FindAll(x => x.ModelYearString == BreakDown4);
                            BreakDownLevel4ModelYear = BreakDown4;
                            break;

                        case "StockNumber":
                            BreakDown4filteredPrices = BreakDown3filteredPrices.FindAll(x => x.StockNumber == BreakDown4);
                            BreakDown4filteredSupply = BreakDown3filteredSupply.FindAll(x => x.StockNumber == BreakDown4);
                            BreakDownLevel4Stock = BreakDown4;
                            break;

                        case "VehicleStatus":
                            BreakDown4filteredPrices = BreakDown3filteredPrices.FindAll(x => x.VehicleStatus == BreakDown4);
                            BreakDown4filteredSupply = BreakDown3filteredSupply.FindAll(x => x.VehicleStatus == BreakDown4);
                            BreakDownLevel4VehicleStatus = BreakDown4;
                            break;

                        case "MakeName":
                            BreakDown4filteredPrices = BreakDown3filteredPrices.FindAll(x => x.MakeName == BreakDown4);
                            BreakDown4filteredSupply = BreakDown3filteredSupply.FindAll(x => x.MakeName == BreakDown4);
                            BreakDownLevel4Make = BreakDown4;
                            break;

                        case "MatrixPricing":
                            BreakDown4filteredPrices = BreakDown3filteredPrices.FindAll(x => x.MatrixPricing == BreakDown4);
                            BreakDown4filteredSupply = BreakDown3filteredSupply;
                            BreakDownLevel4Matrix = BreakDown4;
                            ShowSupplySold_Breakdown4 = false;
                            break;

                        case "LocationCode":
                            BreakDown4filteredPrices = BreakDown3filteredPrices.FindAll(x => x.LocationCode == BreakDown4);
                            BreakDown4filteredSupply = BreakDown3filteredSupply.FindAll(x => x.LocationCode == BreakDown4);
                            BreakDownLevel4Location = BreakDown4;
                            break;

                        case "CRExpired":
                            BreakDown4filteredPrices = BreakDown3filteredPrices.FindAll(x => x.CRExpired == BreakDown4);
                            BreakDown4filteredSupply = BreakDown3filteredSupply;
                            BreakDownLevel4CRExpired = BreakDown4;
                            ShowSupplySold_Breakdown4 = false;

                            break;

                        case "BucketDaysInInventory":
                            BreakDown4filteredPrices = BreakDown3filteredPrices.FindAll(x => x.BucketDaysInInventory == BreakDown4);
                            BreakDown4filteredSupply = BreakDown3filteredSupply;
                            BreakDownLevel4BucketDaysInInventory = BreakDown4;
                            ShowSupplySold_Breakdown4 = false;

                            break;

                        case "StyleName":
                            BreakDown4filteredPrices = BreakDown3filteredPrices.FindAll(x => x.StyleName == BreakDown4);
                            BreakDown4filteredSupply = BreakDown3filteredSupply.FindAll(x => x.StyleName == BreakDown4);
                            ShowSupplySold_Breakdown4 = false;
                            BreakDownLevel4Style = BreakDown4;

                            break;

                        case "Trim":
                            BreakDown4filteredPrices = BreakDown3filteredPrices.FindAll(x => x.Trim == BreakDown4);
                            BreakDown4filteredSupply = BreakDown3filteredSupply.FindAll(x => x.Trim == BreakDown4);
                            BreakDownLevel4Trim = BreakDown4;
                            ShowSupplySold_Breakdown4 = false;

                            break;

                        default:
                            break;
                    }

                    BreakDown4InStockInvoiceTotal = 0;
                    BreakDown4InStockStatus1 = 0;
                    BreakDown4InStockStatus2 = 0;

                    BreakDown4InStockStatus3 = 0;
                    BreakDown4InStockStatus4 = 0;
                    BreakDown4InStockStatus5 = 0;
                    BreakDown4InStockStatusTotal = 0;

                    BreakDown4OnOrderStatus1 = 0;
                    BreakDown4OnOrderStatus2 = 0;

                    BreakDown4OnOrderStatus3 = 0;
                    BreakDown4OnOrderStatus4 = 0;
                    BreakDown4OnOrderStatus5 = 0;
                    BreakDown4OnOrderStatusTotal = 0;
                    BreakDown4Total = 0;
                    BreakDown4Supply = 0;

                    // supply

                    BreakDown4Supply = BreakDown4filteredSupply.Sum(x => x.Cars);

                    BreakDown4data = BreakDown4filteredPrices.FindAll(x => x.PricingStatus == "InStock1");
                    BreakDown4InStockStatus1 = BreakDown4data.Sum(x => x.Id);
                    BreakDown4data = BreakDown4filteredPrices.FindAll(x => x.PricingStatus == "InStock2");
                    BreakDown4InStockStatus2 = BreakDown4data.Sum(x => x.Id);
                    BreakDown4data = BreakDown4filteredPrices.FindAll(x => x.PricingStatus == "InStock3");
                    BreakDown4InStockStatus3 = BreakDown4data.Sum(x => x.Id);
                    BreakDown4data = BreakDown4filteredPrices.FindAll(x => x.PricingStatus == "InStock5");
                    BreakDown4InStockStatus5 = BreakDown4data.Sum(x => x.Id);
                    BreakDown4InStockStatusTotal = BreakDown4InStockStatus1 + BreakDown4InStockStatus2 + BreakDown4InStockStatus3 + BreakDown4InStockStatus4 + BreakDown4InStockStatus5;
                    BreakDown4InStockInvoiceTotal = BreakDown4filteredPrices.Sum(x => x.InvoiceTotal);
                    sBreakDown4InStockInvoiceTotal = BreakDown4InStockInvoiceTotal.ToString("c0");


                    BreakDown4data = BreakDown4filteredPrices.FindAll(x => x.PricingStatus == "OnOrder1");
                    BreakDown4OnOrderStatus1 = BreakDown4data.Sum(x => x.Id);
                    BreakDown4data = BreakDown4filteredPrices.FindAll(x => x.PricingStatus == "OnOrder2");
                    BreakDown4OnOrderStatus2 = BreakDown4data.Sum(x => x.Id);
                    BreakDown4data = BreakDown4filteredPrices.FindAll(x => x.PricingStatus == "OnOrder3");
                    BreakDown4OnOrderStatus3 = BreakDown4data.Sum(x => x.Id);
                    BreakDown4data = BreakDown4filteredPrices.FindAll(x => x.PricingStatus == "OnOrder5");
                    BreakDown4OnOrderStatus5 = BreakDown4data.Sum(x => x.Id);
                    BreakDown4OnOrderStatusTotal = BreakDown4OnOrderStatus1 + BreakDown4OnOrderStatus2 + BreakDown4OnOrderStatus3 + BreakDown4OnOrderStatus4 + BreakDown4OnOrderStatus5;
                    BreakDown4Total = BreakDown4OnOrderStatusTotal + BreakDown4InStockStatusTotal;

                    Supply30Day_BreakDown4 = 0;
                    Supply30Day_Caption4 = "";
                    BreakDown4Supply_Caption = BreakDown4Supply.ToString("N0");
                    Supply30Day_Caption4 = "Err";

                    if (BreakDown4Supply > 0)
                    {
                        Supply30Day_BreakDown4 = ((30 / BreakDown4Supply) * BreakDown4InStockStatusTotal);
                        Supply30Day_Caption4 = Supply30Day_BreakDown4.ToString("N1");
                    }

                    if (ShowSupplySold_Breakdown4 == false)
                    {
                        Supply30Day_Caption4 = "";
                        BreakDown4Supply_Caption = "";
                    }


                    if ((BreakDown4Total > 0) | (BreakDown4Supply > 0))
                    {

                                <tr class="location-bd3-collapse-@BreakDown3Index collapse out location-bd3-data-row-@BreakDown4Index @label4.Replace(" ", "-").Replace(".", "-").Replace("/", "-").Replace("'", "-").Replace("*", "-").Replace("(", "-").Replace(")", "-")" data-collapse="location-bd2-collapse-@BreakDown4Index">

                                    <td class="divider-column indent-td4">
                                        <a data-toggle="collapse" id="location-bd2-collapse-@BreakDown4Index" style="cursor: pointer;" class="location-bd2-collapse-@BreakDown4Index-href collapsed indent-2" data-target=".location-bd2-collapse-@BreakDown4Index">@label4 </a>
                                    </td>
                                    <td class="text-center">@BreakDown4Supply_Caption</td>
                                    <td class="divider-column text-center">
                                        @Supply30Day_Caption4
                                    </td>
                                    <td class="text-center">

                                        @{ if ((BreakDown4InStockStatus1 == 0) | (bPrintFormat != false))
                                            {
                                                @BreakDown4InStockStatus1
                                            }
                                            else
                                            {

                                                @Html.ActionLink("" + BreakDown4InStockStatus1, "ViewVehicles", new
                                           {
                                               pstat = "InStock1",
                                               locd = BreakDownLevel4Location,
                                               stckn = BreakDownLevel4Stock,
                                               Make = BreakDownLevel4Make,
                                               mdlv = BreakDownLevel4Model,
                                               mxyn = BreakDownLevel4Matrix,
                                               crx = BreakDownLevel4CRExpired,
                                               styln = BreakDownLevel4Style,
                                               trmnm = BreakDownLevel4Trim,
                                               bDay = BreakDownLevel4BucketDaysInInventory,
                                               yr = BreakDownLevel4ModelYear,
                                               mc = BreakDownLevel4ModelCode
                            ,
                                               x2 = bExclStatus2
                               ,
                                               vs = BreakDownLevel4VehicleStatus
                                                                                   ,
                                               usedOrNew = Model.ReportType

                                           }, new { target = "_blank" }) }
                                        }

                                    </td>
                                    <td class="text-center">
                                        @{ if ((BreakDown4InStockStatus2 == 0) | (bPrintFormat != false))
                                            {
                                                @BreakDown4InStockStatus2
                                            }
                                            else
                                            {

                                                @Html.ActionLink("" + BreakDown4InStockStatus2, "ViewVehicles", new
                                           {
                                               pstat = "InStock2",
                                               locd = BreakDownLevel4Location,
                                               stckn = BreakDownLevel4Stock,
                                               Make = BreakDownLevel4Make,
                                               mdlv = BreakDownLevel4Model,
                                               mxyn = BreakDownLevel4Matrix,
                                               crx = BreakDownLevel4CRExpired,
                                               styln = BreakDownLevel4Style,
                                               trmnm = BreakDownLevel4Trim,
                                               bDay = BreakDownLevel4BucketDaysInInventory,
                                               yr = BreakDownLevel4ModelYear,
                                               mc = BreakDownLevel4ModelCode
                            ,
                                               x2 = bExclStatus2
                               ,
                                               vs = BreakDownLevel4VehicleStatus
                                                                                   ,
                                               usedOrNew = Model.ReportType

                                           }, new { target = "_blank" }) }
                                        }

                                    </td>

                                    <td class="text-center">
                                        @{ if ((BreakDown4InStockStatus3 == 0) | (bPrintFormat != false))
                                            {
                                                @BreakDown4InStockStatus3
                                            }
                                            else
                                            {

                                                @Html.ActionLink("" + BreakDown4InStockStatus3, "ViewVehicles", new
                                           {
                                               pstat = "InStock3",
                                               locd = BreakDownLevel4Location,
                                               stckn = BreakDownLevel4Stock,
                                               Make = BreakDownLevel4Make,
                                               mdlv = BreakDownLevel4Model,
                                               mxyn = BreakDownLevel4Matrix,
                                               crx = BreakDownLevel4CRExpired,
                                               styln = BreakDownLevel4Style,
                                               trmnm = BreakDownLevel4Trim,
                                               bDay = BreakDownLevel4BucketDaysInInventory,
                                               yr = BreakDownLevel4ModelYear,
                                               mc = BreakDownLevel4ModelCode
                            ,
                                               x2 = bExclStatus2
                               ,
                                               vs = BreakDownLevel4VehicleStatus
                                                                                   ,
                                               usedOrNew = Model.ReportType

                                           }, new { target = "_blank" }) }
                                        }

                                    </td>
                                    <td class="text-center">
                                        @{ if ((BreakDown4InStockStatus5 == 0) | (bPrintFormat != false))
                                            {
                                                @BreakDown4InStockStatus5
                                            }
                                            else
                                            {

                                                @Html.ActionLink("" + BreakDown4InStockStatus5, "ViewVehicles", new
                                           {
                                               pstat = "InStock5",
                                               locd = BreakDownLevel4Location,
                                               stckn = BreakDownLevel4Stock,
                                               Make = BreakDownLevel4Make,
                                               mdlv = BreakDownLevel4Model,
                                               mxyn = BreakDownLevel4Matrix,
                                               crx = BreakDownLevel4CRExpired,
                                               styln = BreakDownLevel4Style,
                                               trmnm = BreakDownLevel4Trim,
                                               bDay = BreakDownLevel4BucketDaysInInventory,
                                               yr = BreakDownLevel4ModelYear,
                                               mc = BreakDownLevel4ModelCode
                            ,
                                               x2 = bExclStatus2
                               ,
                                               vs = BreakDownLevel4VehicleStatus
                                                                                   ,
                                               usedOrNew = Model.ReportType

                                           }, new { target = "_blank" }) }
                                        }

                                    </td>
                                    <td class="divider-column text-center">
                                        @{ if ((BreakDown4InStockStatusTotal == 0) | (bPrintFormat != false))
                                            {
                                                @BreakDown4InStockStatusTotal
                                            }
                                            else
                                            {

                                                @Html.ActionLink("" + BreakDown4InStockStatusTotal, "ViewVehicles", new
                                           {
                                               pstat = "InStock",
                                               locd = BreakDownLevel4Location,
                                               stckn = BreakDownLevel4Stock,
                                               Make = BreakDownLevel4Make,
                                               mdlv = BreakDownLevel4Model,
                                               mxyn = BreakDownLevel4Matrix,
                                               crx = BreakDownLevel4CRExpired,
                                               styln = BreakDownLevel4Style,
                                               trmnm = BreakDownLevel4Trim,
                                               bDay = BreakDownLevel4BucketDaysInInventory,
                                               yr = BreakDownLevel4ModelYear,
                                               mc = BreakDownLevel4ModelCode
                            ,
                                               x2 = bExclStatus2
                               ,
                                               vs = BreakDownLevel4VehicleStatus
                                                                                   ,
                                               usedOrNew = Model.ReportType

                                           }, new { target = "_blank" }) }
                                        }

                                    </td>

                                    <td class="divider-column text-center">
                                        @{ if ((BreakDown4InStockInvoiceTotal == 0) | (bPrintFormat != false))
                                            {
                                                @sBreakDown4InStockInvoiceTotal
                                            }
                                            else
                                            {

                                                @Html.ActionLink("" + sBreakDown4InStockInvoiceTotal, "ViewVehicles", new
                                           {
                                               pstat = "InStock",
                                               locd = BreakDownLevel4Location,
                                               stckn = BreakDownLevel4Stock,
                                               Make = BreakDownLevel4Make,
                                               mdlv = BreakDownLevel4Model,
                                               mxyn = BreakDownLevel4Matrix,
                                               crx = BreakDownLevel4CRExpired,
                                               styln = BreakDownLevel4Style,
                                               trmnm = BreakDownLevel4Trim,
                                               bDay = BreakDownLevel4BucketDaysInInventory,
                                               yr = BreakDownLevel4ModelYear,
                                               mc = BreakDownLevel4ModelCode
                                                     ,
                                               x2 = bExclStatus2
                                               ,
                                               vs = BreakDownLevel4VehicleStatus
                                                                                        ,
                                               usedOrNew = Model.ReportType

                                           }, new { target = "_blank" })
                                            }
                                        }

                                    </td>

                                    <td class="text-center">
                                        @{ if ((BreakDown4OnOrderStatus1 == 0) | (bPrintFormat != false))
                                            {
                                                @BreakDown4OnOrderStatus1
                                            }
                                            else
                                            {

                                                @Html.ActionLink("" + BreakDown4OnOrderStatus1, "ViewVehicles", new
                                           {
                                               pstat = "OnOrder1",
                                               locd = BreakDownLevel4Location,
                                               stckn = BreakDownLevel4Stock,
                                               Make = BreakDownLevel4Make,
                                               mdlv = BreakDownLevel4Model,
                                               mxyn = BreakDownLevel4Matrix,
                                               crx = BreakDownLevel4CRExpired,
                                               styln = BreakDownLevel4Style,
                                               trmnm = BreakDownLevel4Trim,
                                               bDay = BreakDownLevel4BucketDaysInInventory,
                                               yr = BreakDownLevel4ModelYear,
                                               mc = BreakDownLevel4ModelCode
                            ,
                                               x2 = bExclStatus2
                               ,
                                               vs = BreakDownLevel4VehicleStatus
                                                                                   ,
                                               usedOrNew = Model.ReportType

                                           }, new { target = "_blank" }) }
                                        }

                                    </td>
                                    <td class="text-center">
                                        @{ if ((BreakDown4OnOrderStatus2 == 0) | (bPrintFormat != false))
                                            {
                                                @BreakDown4OnOrderStatus2
                                            }
                                            else
                                            {

                                                @Html.ActionLink("" + BreakDown4OnOrderStatus2, "ViewVehicles", new
                                           {
                                               pstat = "OnOrder2",
                                               locd = BreakDownLevel4Location,
                                               stckn = BreakDownLevel4Stock,
                                               Make = BreakDownLevel4Make,
                                               mdlv = BreakDownLevel4Model,
                                               mxyn = BreakDownLevel4Matrix,
                                               crx = BreakDownLevel4CRExpired,
                                               styln = BreakDownLevel4Style,
                                               trmnm = BreakDownLevel4Trim,
                                               bDay = BreakDownLevel4BucketDaysInInventory,
                                               yr = BreakDownLevel4ModelYear,
                                               mc = BreakDownLevel4ModelCode
                            ,
                                               x2 = bExclStatus2
                               ,
                                               vs = BreakDownLevel4VehicleStatus
                                                                                   ,
                                               usedOrNew = Model.ReportType

                                           }, new { target = "_blank" }) }
                                        }

                                    </td>

                                    <td class="text-center">
                                        @{ if ((BreakDown4OnOrderStatus3 == 0) | (bPrintFormat != false))
                                            {
                                                @BreakDown4OnOrderStatus3
                                            }
                                            else
                                            {

                                                @Html.ActionLink("" + BreakDown4OnOrderStatus3, "ViewVehicles", new
                                           {
                                               pstat = "OnOrder3",
                                               locd = BreakDownLevel4Location,
                                               stckn = BreakDownLevel4Stock,
                                               Make = BreakDownLevel4Make,
                                               mdlv = BreakDownLevel4Model,
                                               mxyn = BreakDownLevel4Matrix,
                                               crx = BreakDownLevel4CRExpired,
                                               styln = BreakDownLevel4Style,
                                               trmnm = BreakDownLevel4Trim,
                                               bDay = BreakDownLevel4BucketDaysInInventory,
                                               yr = BreakDownLevel4ModelYear,
                                               mc = BreakDownLevel4ModelCode
                            ,
                                               x2 = bExclStatus2
                               ,
                                               vs = BreakDownLevel4VehicleStatus
                                                                                   ,
                                               usedOrNew = Model.ReportType

                                           }, new { target = "_blank" }) }
                                        }

                                    </td>
                                    <td class="text-center">
                                        @{ if ((BreakDown4OnOrderStatus5 == 0) | (bPrintFormat != false))
                                            {
                                                @BreakDown4OnOrderStatus5
                                            }
                                            else
                                            {

                                                @Html.ActionLink("" + BreakDown4OnOrderStatus5, "ViewVehicles", new
                                           {
                                               pstat = "OnOrder5",
                                               locd = BreakDownLevel4Location,
                                               stckn = BreakDownLevel4Stock,
                                               Make = BreakDownLevel4Make,
                                               mdlv = BreakDownLevel4Model,
                                               mxyn = BreakDownLevel4Matrix,
                                               crx = BreakDownLevel4CRExpired,
                                               styln = BreakDownLevel4Style,
                                               trmnm = BreakDownLevel4Trim,
                                               bDay = BreakDownLevel4BucketDaysInInventory,
                                               yr = BreakDownLevel4ModelYear,
                                               mc = BreakDownLevel4ModelCode
                            ,
                                               x2 = bExclStatus2
                               ,
                                               vs = BreakDownLevel4VehicleStatus
                                                                                   ,
                                               usedOrNew = Model.ReportType

                                           }, new { target = "_blank" }) }
                                        }

                                    </td>
                                    <td class="divider-column text-center">
                                        @{ if ((BreakDown4OnOrderStatusTotal == 0) | (bPrintFormat != false))
                                            {
                                                @BreakDown4OnOrderStatusTotal
                                            }
                                            else
                                            {

                                                @Html.ActionLink("" + BreakDown4OnOrderStatusTotal, "ViewVehicles", new
                                           {
                                               pstat = "OnOrder",
                                               locd = BreakDownLevel4Location,
                                               stckn = BreakDownLevel4Stock,
                                               Make = BreakDownLevel4Make,
                                               mdlv = BreakDownLevel4Model,
                                               mxyn = BreakDownLevel4Matrix,
                                               crx = BreakDownLevel4CRExpired,
                                               styln = BreakDownLevel4Style,
                                               trmnm = BreakDownLevel4Trim,
                                               bDay = BreakDownLevel4BucketDaysInInventory,
                                               yr = BreakDownLevel4ModelYear,
                                               mc = BreakDownLevel4ModelCode
                            ,
                                               x2 = bExclStatus2
                               ,
                                               vs = BreakDownLevel4VehicleStatus
                                                                                   ,
                                               usedOrNew = Model.ReportType

                                           }, new { target = "_blank" }) }
                                        }

                                    </td>
                                    <td class="divider-column text-center">
                                        @{ if ((BreakDown4Total == 0) | (bPrintFormat != false))
                                            {
                                                @BreakDown4Total
                                            }
                                            else
                                            {

                                                @Html.ActionLink("" + BreakDown4Total, "ViewVehicles", new
                                           {
                                               pstat = "",
                                               locd = BreakDownLevel4Location,
                                               stckn = BreakDownLevel4Stock,
                                               Make = BreakDownLevel4Make,
                                               mdlv = BreakDownLevel4Model,
                                               mxyn = BreakDownLevel4Matrix,
                                               crx = BreakDownLevel4CRExpired,
                                               styln = BreakDownLevel4Style,
                                               trmnm = BreakDownLevel4Trim,
                                               bDay = BreakDownLevel4BucketDaysInInventory,
                                               yr = BreakDownLevel4ModelYear,
                                               mc = BreakDownLevel4ModelCode
                            ,
                                               x2 = bExclStatus2
                               ,
                                               vs = BreakDownLevel4VehicleStatus
                                                                                   ,
                                               usedOrNew = Model.ReportType

                                           }, new { target = "_blank" }) }
                                        }

                                    </td>


                                </tr>
                            }


                            BreakDown4Index += 1;

                        }


                        BreakDown3Index += 1;

                    }

                    BreakDown2Index += 1;

                }

                Breakdown1Index += 1;
            }
        }
        <tfoot>

            @{
                TotalSupply30Day_CaptionTotal = "Err";

                if (TotalSold30Count > 0)
                {
                    Supply30Day_BreakDownTotal = ((30 / TotalSold30Count) * InStockCountTotal);
                    TotalSupply30Day_CaptionTotal = Supply30Day_BreakDownTotal.ToString("N1");
                }
                sInStockInvoiceTotal = InStockInvoiceTotal.ToString("c0");
            }
            <tr>
            <tr style="background-color:#d9edf7;">
                <th class="text-center divider-column ">Totals</th>
                <th class="text-center">@TotalSold30Count</th>
                <th class="divider-column text-center">@TotalSupply30Day_CaptionTotal</th>
                <th class="text-center">
                    @{ if ((InStock1Count == 0) | (bPrintFormat != false))
                        {
                            @InStock1Count
                        }
                        else
                        {

                            @Html.ActionLink("" + InStock1Count, "ViewVehicles", new
                       {
                           pstat = "InStock1",
                           locd = "",
                           stckn = "",
                           Make = "",
                           mdlv = "",
                           mxyn = "",
                           crx = "",
                           styln = "",
                           trmnm = "",
                           bDay = "",
                           yr = "",
                           mc = ""
                       ,
                           x2 = bExclStatus2
                                                                    ,
                           usedOrNew = Model.ReportType

                       }, new { target = "_blank" })
                        }
                    }

                </th>
                <th class="text-center">
                    @{ if ((InStock2Count == 0) | (bPrintFormat != false))
                        {
                            @InStock2Count
                        }
                        else
                        {

                            @Html.ActionLink("" + InStock2Count, "ViewVehicles", new
                       {
                           pstat = "InStock2",
                           locd = "",
                           stckn = "",
                           Make = "",
                           mdlv = "",
                           mxyn = "",
                           crx = "",
                           styln = "",
                           trmnm = "",
                           bDay = "",
                           yr = "",
                           mc = ""
                       ,
                           x2 = bExclStatus2
                                                                    ,
                           usedOrNew = Model.ReportType

                       }, new { target = "_blank" })
                        }
                    }

                </th>

                <th class="text-center">
                    @{ if ((InStock3Count == 0) | (bPrintFormat != false))
                        {
                            @InStock3Count
                        }
                        else
                        {

                            @Html.ActionLink("" + InStock3Count, "ViewVehicles", new
                       {
                           pstat = "InStock3",
                           locd = "",
                           stckn = "",
                           Make = "",
                           mdlv = "",
                           mxyn = "",
                           crx = "",
                           styln = "",
                           trmnm = "",
                           bDay = "",
                           yr = "",
                           mc = ""
                       ,
                           x2 = bExclStatus2
                                                                    ,
                           usedOrNew = Model.ReportType

                       }, new { target = "_blank" })
                        }
                    }

                </th>
                <th class="text-center">
                    @{ if ((InStock5Count == 0) | (bPrintFormat != false))
                        {
                            @InStock5Count
                        }
                        else
                        {

                            @Html.ActionLink("" + InStock5Count, "ViewVehicles", new
                       {
                           pstat = "InStock5",
                           locd = "",
                           stckn = "",
                           Make = "",
                           mdlv = "",
                           mxyn = "",
                           crx = "",
                           styln = "",
                           trmnm = "",
                           bDay = "",
                           yr = "",
                           mc = ""
                       ,
                           x2 = bExclStatus2
                                                                    ,
                           usedOrNew = Model.ReportType

                       }, new { target = "_blank" })
                        }
                    }

                </th>
                <th class="text-center divider-column ">
                    @{ if ((InStockCountTotal == 0) | (bPrintFormat != false))
                        {
                            @InStockCountTotal
                        }
                        else
                        {

                            @Html.ActionLink("" + InStockCountTotal, "ViewVehicles", new
                       {
                           pstat = "InStock",
                           locd = "",
                           stckn = "",
                           Make = "",
                           mdlv = "",
                           mxyn = "",
                           crx = "",
                           styln = "",
                           trmnm = "",
                           bDay = "",
                           yr = "",
                           mc = ""
                       ,
                           x2 = bExclStatus2
                                                                    ,
                           usedOrNew = Model.ReportType

                       }, new { target = "_blank" })
                        }
                    }

                </th>
                <th class="text-center divider-column ">
                    @{ if ((InStockInvoiceTotal == 0) | (bPrintFormat != false))
                        {
                            @sInStockInvoiceTotal
                        }
                        else
                        {

                            @Html.ActionLink("" + sInStockInvoiceTotal, "ViewVehicles", new
                       {
                           pstat = "InStock",
                           locd = "",
                           stckn = "",
                           Make = "",
                           mdlv = "",
                           mxyn = "",
                           crx = "",
                           styln = "",
                           trmnm = "",
                           bDay = "",
                           yr = "",
                           mc = ""
                       ,
                           x2 = bExclStatus2
                                                                    ,
                           usedOrNew = Model.ReportType

                       }, new { target = "_blank" })
                        }
                    }

                </th>
                <th class="text-center">
                    @{ if ((OnOrder1Count == 0) | (bPrintFormat != false))
                        {
                            @OnOrder1Count
                        }
                        else
                        {

                            @Html.ActionLink("" + OnOrder1Count, "ViewVehicles", new
                       {
                           pstat = "OnOrder1",
                           locd = "",
                           stckn = "",
                           Make = "",
                           mdlv = "",
                           mxyn = "",
                           crx = "",
                           styln = "",
                           trmnm = "",
                           bDay = "",
                           yr = "",
                           mc = ""
                       ,
                           x2 = bExclStatus2
                                                                    ,
                           usedOrNew = Model.ReportType

                       }, new { target = "_blank" })
                        }
                    }

                </th>
                <th class="text-center">
                    @{ if ((OnOrder2Count == 0) | (bPrintFormat != false))
                        {
                            @OnOrder2Count
                        }
                        else
                        {

                            @Html.ActionLink("" + OnOrder2Count, "ViewVehicles", new
                       {
                           pstat = "OnOrder2",
                           locd = "",
                           stckn = "",
                           Make = "",
                           mdlv = "",
                           mxyn = "",
                           crx = "",
                           styln = "",
                           trmnm = "",
                           bDay = "",
                           yr = "",
                           mc = ""
                       ,
                           x2 = bExclStatus2
                                                                    ,
                           usedOrNew = Model.ReportType

                       }, new { target = "_blank" })
                        }
                    }

                </th>

                <th class="text-center">
                    @{ if ((OnOrder3Count == 0) | (bPrintFormat != false))
                        {
                            @OnOrder3Count
                        }
                        else
                        {

                            @Html.ActionLink("" + OnOrder3Count, "ViewVehicles", new
                       {
                           pstat = "OnOrder3",
                           locd = "",
                           stckn = "",
                           Make = "",
                           mdlv = "",
                           mxyn = "",
                           crx = "",
                           styln = "",
                           trmnm = "",
                           bDay = "",
                           yr = "",
                           mc = ""
                            ,
                           x2 = bExclStatus2
                                                                    ,
                           usedOrNew = Model.ReportType

                       }, new { target = "_blank" })
                        }
                    }

                </th>
                <th class="text-center">
                    @{ if ((OnOrder5Count == 0) | (bPrintFormat != false))
                        {
                            @OnOrder5Count
                        }
                        else
                        {

                            @Html.ActionLink("" + OnOrder5Count, "ViewVehicles", new
                       {
                           pstat = "OnOrder5",
                           locd = "",
                           stckn = "",
                           Make = "",
                           mdlv = "",
                           mxyn = "",
                           crx = "",
                           styln = "",
                           trmnm = "",
                           bDay = "",
                           yr = "",
                           mc = ""
                            ,
                           x2 = bExclStatus2
                                                                    ,
                           usedOrNew = Model.ReportType

                       }, new { target = "_blank" })
                        }
                    }

                </th>
                <th class="text-center divider-column ">
                    @{ if ((OnOrderCountTotal == 0) | (bPrintFormat != false))
                        {
                            @OnOrderCountTotal
                        }
                        else
                        {

                            @Html.ActionLink("" + OnOrderCountTotal, "ViewVehicles", new
                       {
                           pstat = "OnOrder",
                           locd = "",
                           stckn = "",
                           Make = "",
                           mdlv = "",
                           mxyn = "",
                           crx = "",
                           styln = "",
                           trmnm = "",
                           bDay = "",
                           yr = "",
                           mc = ""
                            ,
                           x2 = bExclStatus2
                                                                    ,
                           usedOrNew = Model.ReportType

                       }, new { target = "_blank" })
                        }
                    }

                </th>
                <th class="divider-column text-center">
                    @{ if ((BOTHCountTotal == 0) | (bPrintFormat != false))
                        {
                            @BOTHCountTotal
                        }
                        else
                        {

                            @Html.ActionLink("" + BOTHCountTotal, "ViewVehicles", new
                       {
                           pstat = "",
                           locd = "",
                           stckn = "",
                           Make = "",
                           mdlv = "",
                           mxyn = "",
                           crx = "",
                           styln = "",
                           trmnm = "",
                           bDay = "",
                           yr = "",
                           mc = ""
                            ,
                           x2 = bExclStatus2
                                                                    ,
                           usedOrNew = Model.ReportType

                       }, new { target = "_blank" })
                        }
                    }

                </th>



            </tr>
        </tfoot>
    </table>


</div>

<script type="text/javascript">

                                $(document).ready(function () {
                                    $(".location-bd1-collapse-@Breakdown1Index-href").click(function () {
                                        $('.location-bd1-data-row-@Breakdown1Index ').toggleClass('selected-row');
                                        $(".location-bd1-collapse-@Breakdown1Index-href").toggleClass('changed');
            });
        });
</script>

<script>
    // @@preserve jQuery.floatThead 1.2.9 - http://mkoryak.github.io/floatThead/ - Copyright (c) 2012 - 2014 Misha Koryak
    // @@license MIT
    !function (a) { function b(a, b, c) { if (8 == g) { var d = j.width(), e = f.debounce(function () { var a = j.width(); d != a && (d = a, c()) }, a); j.on(b, e) } else j.on(b, f.debounce(c, a)) } function c(a) { window.console && window.console && window.console.log && window.console.log(a) } function d() { var b = a('<div style="width:50px;height:50px;overflow-y:scroll;position:absolute;top:-200px;left:-200px;"><div style="height:100px;width:100%"></div>'); a("body").append(b); var c = b.innerWidth(), d = a("div", b).innerWidth(); return b.remove(), c - d } function e(a) { if (a.dataTableSettings) for (var b = 0; b < a.dataTableSettings.length; b++) { var c = a.dataTableSettings[b].nTable; if (a[0] == c) return !0 } return !1 } a.floatThead = a.floatThead || {}, a.floatThead.defaults = { cellTag: null, headerCellSelector: "tr:first>th:visible", zIndex: 1001, debounceResizeMs: 10, useAbsolutePositioning: !0, scrollingTop: 0, scrollingBottom: 0, scrollContainer: function () { return a([]) }, getSizingRow: function (a) { return a.find("tbody tr:visible:first>*") }, floatTableClass: "floatThead-table", floatWrapperClass: "floatThead-wrapper", floatContainerClass: "floatThead-container", copyTableClass: !0, debug: !1 }; var f = window._, g = function () { for (var a = 3, b = document.createElement("b"), c = b.all || []; a = 1 + a, b.innerHTML = "<!--[if gt IE " + a + "]><i><![endif]-->", c[0];); return a > 4 ? a : document.documentMode }(), h = null, i = function () { if (g) return !1; var b = a("<table><colgroup><col></colgroup><tbody><tr><td style='width:10px'></td></tbody></table>"); a("body").append(b); var c = b.find("col").width(); return b.remove(), 0 == c }, j = a(window), k = 0; a.fn.floatThead = function (l) { if (l = l || {}, !f && (f = window._ || a.floatThead._, !f)) throw new Error("jquery.floatThead-slim.js requires underscore. You should use the non-lite version since you do not have underscore."); if (8 > g) return this; if (null == h && (h = i(), h && (document.createElement("fthtr"), document.createElement("fthtd"), document.createElement("fthfoot"))), f.isString(l)) { var m = l, n = this; return this.filter("table").each(function () { var b = a(this).data("floatThead-attached"); if (b && f.isFunction(b[m])) { var c = b[m](); "undefined" != typeof c && (n = c) } }), n } var o = a.extend({}, a.floatThead.defaults || {}, l); return a.each(l, function (b) { b in a.floatThead.defaults || !o.debug || c("jQuery.floatThead: used [" + b + "] key to init plugin, but that param is not an option for the plugin. Valid options are: " + f.keys(a.floatThead.defaults).join(", ")) }), this.filter(":not(." + o.floatTableClass + ")").each(function () { function c(a) { return a + ".fth-" + y + ".floatTHead" } function i() { var b = 0; A.find("tr:visible").each(function () { b += a(this).outerHeight(!0) }), Z.outerHeight(b), $.outerHeight(b) } function l() { var a = z.outerWidth(), b = I.width() || a; if (X.width(b - F.vertical), O) { var c = 100 * a / (b - F.vertical); S.css("width", c + "%") } else S.outerWidth(a) } function m() { C = (f.isFunction(o.scrollingTop) ? o.scrollingTop(z) : o.scrollingTop) || 0, D = (f.isFunction(o.scrollingBottom) ? o.scrollingBottom(z) : o.scrollingBottom) || 0 } function n() { var b, c; if (V) b = U.find("col").length; else { var d; d = null == o.cellTag && o.headerCellSelector ? o.headerCellSelector : "tr:first>" + o.cellTag, c = A.find(d), b = 0, c.each(function () { b += parseInt(a(this).attr("colspan") || 1, 10) }) } if (b != H) { H = b; for (var e = [], f = [], g = [], i = 0; b > i; i++)e.push('<th class="floatThead-col"/>'), f.push("<col/>"), g.push("<fthtd style='display:table-cell;height:0;width:auto;'/>"); f = f.join(""), e = e.join(""), h && (g = g.join(""), W.html(g), bb = W.find("fthtd")), Z.html(e), $ = Z.find("th"), V || U.html(f), _ = U.find("col"), T.html(f), ab = T.find("col") } return b } function p() { if (!E) { if (E = !0, J) { var a = z.width(), b = Q.width(); a > b && z.css("minWidth", a) } z.css(db), S.css(db), S.append(A), B.before(Y), i() } } function q() { E && (E = !1, J && z.width(fb), Y.detach(), z.prepend(A), z.css(eb), S.css(eb)) } function r(a) { J != a && (J = a, X.css({ position: J ? "absolute" : "fixed" })) } function s(a, b, c, d) { return h ? c : d ? o.getSizingRow(a, b, c) : b } function t() { var a, b = n(); return function () { var c = s(z, _, bb, g); if (c.length == b && b > 0) { if (!V) for (a = 0; b > a; a++)_.eq(a).css("width", ""); q(); var d = []; for (a = 0; b > a; a++)d[a] = c.get(a).offsetWidth; for (a = 0; b > a; a++)ab.eq(a).width(d[a]), _.eq(a).width(d[a]); p() } else S.append(A), z.css(eb), S.css(eb), i() } } function u(a) { var b = I.css("border-" + a + "-width"), c = 0; return b && ~b.indexOf("px") && (c = parseInt(b, 10)), c } function v() { var a, b = I.scrollTop(), c = 0, d = L ? K.outerHeight(!0) : 0, e = M ? d : -d, f = X.height(), g = z.offset(), i = 0; if (O) { var k = I.offset(); c = g.top - k.top + b, L && M && (c += d), c -= u("top"), i = u("left") } else a = g.top - C - f + D + F.horizontal; var l = j.scrollTop(), m = j.scrollLeft(), n = I.scrollLeft(); return b = I.scrollTop(), function (k) { if ("windowScroll" == k ? (l = j.scrollTop(), m = j.scrollLeft()) : "containerScroll" == k ? (b = I.scrollTop(), n = I.scrollLeft()) : "init" != k && (l = j.scrollTop(), m = j.scrollLeft(), b = I.scrollTop(), n = I.scrollLeft()), !h || !(0 > l || 0 > m)) { if (R) r("windowScrollDone" == k ? !0 : !1); else if ("windowScrollDone" == k) return null; g = z.offset(), L && M && (g.top += d); var o, s, t = z.outerHeight(); if (O && J) { if (c >= b) { var u = c - b; o = u > 0 ? u : 0 } else o = P ? 0 : b; s = i } else !O && J ? (l > a + t + e ? o = t - f + e : g.top > l + C ? (o = 0, q()) : (o = C + l - g.top + c + (M ? d : 0), p()), s = 0) : O && !J ? (c > b || b - c > t ? (o = g.top - l, q()) : (o = g.top + b - l - c, p()), s = g.left + n - m) : O || J || (l > a + t + e ? o = t + C - l + a + e : g.top > l + C ? (o = g.top - l, p()) : o = C, s = g.left - m); return { top: o, left: s } } } } function w() { var a = null, b = null, c = null; return function (d, e, f) { null == d || a == d.top && b == d.left || (X.css({ top: d.top, left: d.left }), a = d.top, b = d.left), e && l(), f && i(); var g = I.scrollLeft(); J && c == g || (X.scrollLeft(g), c = g) } } function x() { if (I.length) { var a = I.width(), b = I.height(), c = z.height(), d = z.width(), e = d > a ? G : 0, f = c > b ? G : 0; F.horizontal = d > a - f ? G : 0, F.vertical = c > b - e ? G : 0 } } var y = k, z = a(this); if (z.data("floatThead-attached")) return !0; if (!z.is("table")) throw new Error('jQuery.floatThead must be run on a table element. ex: $("table").floatThead();'); var A = z.find("thead:first"), B = z.find("tbody:first"); if (0 == A.length) throw new Error("jQuery.floatThead must be run on a table that contains a <thead> element"); var C, D, E = !1, F = { vertical: 0, horizontal: 0 }, G = d(), H = 0, I = o.scrollContainer(z) || a([]), J = o.useAbsolutePositioning; null == J && (J = o.scrollContainer(z).length); var K = z.find("caption"), L = 1 == K.length; if (L) var M = "top" === (K.css("caption-side") || K.attr("align") || "top"); var N = a('<fthfoot style="display:table-footer-group;"/>'), O = I.length > 0, P = !1, Q = a([]), R = 9 >= g && !O && J, S = a("<table/>"), T = a("<colgroup/>"), U = z.find("colgroup:first"), V = !0; 0 == U.length && (U = a("<colgroup/>"), V = !1); var W = a('<fthrow style="display:table-row;height:0;"/>'), X = a('<div style="overflow: hidden;"></div>'), Y = a("<thead/>"), Z = a('<tr class="size-row"/>'), $ = a([]), _ = a([]), ab = a([]), bb = a([]); if (Y.append(Z), z.prepend(U), h && (N.append(W), z.append(N)), S.append(T), X.append(S), o.copyTableClass && S.attr("class", z.attr("class")), S.attr({ cellpadding: z.attr("cellpadding"), cellspacing: z.attr("cellspacing"), border: z.attr("border") }), S.css({ borderCollapse: z.css("borderCollapse"), border: z.css("border") }), S.addClass(o.floatTableClass).css("margin", 0), J) { var cb = function (a, b) { var c = a.css("position"), d = "relative" == c || "absolute" == c; if (!d || b) { var e = { paddingLeft: a.css("paddingLeft"), paddingRight: a.css("paddingRight") }; X.css(e), a = a.wrap("<div class='" + o.floatWrapperClass + "' style='position: relative; clear:both;'></div>").parent(), P = !0 } return a }; O ? (Q = cb(I, !0), Q.append(X)) : (Q = cb(z), z.after(X)) } else z.after(X); X.css({ position: J ? "absolute" : "fixed", marginTop: 0, top: J ? 0 : "auto", zIndex: o.zIndex }), X.addClass(o.floatContainerClass), m(); var db = { "table-layout": "fixed" }, eb = { "table-layout": z.css("tableLayout") || "auto" }, fb = z[0].style.width || ""; x(); var gb, hb = function () { (gb = t())() }; hb(); var ib = v(), jb = w(); jb(ib("init"), !0); var kb = f.debounce(function () { jb(ib("windowScrollDone"), !1) }, 300), lb = function () { jb(ib("windowScroll"), !1), kb() }, mb = function () { jb(ib("containerScroll"), !1) }, nb = function () { m(), x(), hb(), ib = v(), (jb = w())(ib("resize"), !0, !0) }, ob = f.debounce(function () { x(), m(), hb(), ib = v(), jb(ib("reflow"), !0) }, 1); O ? J ? I.on(c("scroll"), mb) : (I.on(c("scroll"), mb), j.on(c("scroll"), lb)) : j.on(c("scroll"), lb), j.on(c("load"), ob), b(o.debounceResizeMs, c("resize"), nb), z.on("reflow", ob), e(z) && z.on("filter", ob).on("sort", ob).on("page", ob), z.data("floatThead-attached", { destroy: function () { var a = ".fth-" + y; q(), z.css(eb), U.remove(), h && N.remove(), Y.parent().length && Y.replaceWith(A), z.off("reflow"), I.off(a), P && (I.length ? I.unwrap() : z.unwrap()), J && z.css("minWidth", ""), X.remove(), z.data("floatThead-attached", !1), j.off(a) }, reflow: function () { ob() }, setHeaderHeight: function () { i() }, getFloatContainer: function () { return X }, getRowGroups: function () { return E ? X.find("thead").add(z.find("tbody,tfoot")) : z.find("thead,tbody,tfoot") } }), k++ }), this } }(jQuery), function (a) { a.floatThead = a.floatThead || {}, a.floatThead._ = window._ || function () { var b = {}, c = Object.prototype.hasOwnProperty, d = ["Arguments", "Function", "String", "Number", "Date", "RegExp"]; return b.has = function (a, b) { return c.call(a, b) }, b.keys = function (a) { if (a !== Object(a)) throw new TypeError("Invalid object"); var c = []; for (var d in a) b.has(a, d) && c.push(d); return c }, a.each(d, function () { var a = this; b["is" + a] = function (b) { return Object.prototype.toString.call(b) == "[object " + a + "]" } }), b.debounce = function (a, b, c) { var d, e, f, g, h; return function () { f = this, e = arguments, g = new Date; var i = function () { var j = new Date - g; b > j ? d = setTimeout(i, b - j) : (d = null, c || (h = a.apply(f, e))) }, j = c && !d; return d || (d = setTimeout(i, b)), j && (h = a.apply(f, e)), h } }, b }() }(jQuery);



    $(document).ready(function () {

        $(".sticky-header").floatThead({ scrollingTop: 70 });

    });
</script>

<script type="text/javascript">

                                $(document).ready(function () {
                                    $(".location-bd2-collapse-@BreakDown2Index-href").click(function () {
                                        $('.location-bd2-data-row-@BreakDown2Index ').toggleClass('selected-row');
                                        $(".location-bd2-collapse-@BreakDown2Index-href").toggleClass('changed');
            });
        });
</script>

<script type="text/javascript">

                                $(document).ready(function () {
                                    $(".location-bd3-collapse-@BreakDown3Index-href").click(function () {
                                        $('.location-bd3-data-row-@BreakDown3Index ').toggleClass('selected-row');
                                        $(".location-bd3-collapse-@BreakDown3Index-href").toggleClass('changed');
            });
        });
</script>